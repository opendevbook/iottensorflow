{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intruduction Machine Learning On Edge Computing","text":""},{"location":"#course","title":"Course:","text":""},{"location":"#day1-part1-esp32","title":"Day1: part1 ESP32","text":"<ul> <li>Arduino IDE Setup</li> <li>PlatformIO IDE Setup</li> <li>ESP 32 Core Library</li> <li>C/C++ IoT Development</li> </ul>"},{"location":"#day1-part2-develop-traning-kit","title":"Day1: Part2 Develop Traning kit","text":"<ul> <li>ESP32 iot development on komomi Board</li> </ul>"},{"location":"#day2-part1-esp32-cam-project","title":"Day2: Part1 ESP32 Cam Project","text":"<ul> <li>ESP32-Cam \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e25\u0e49\u0e2d\u0e07 OV2640</li> <li>Face Detaction</li> <li>Save Image to SD Card</li> <li>Send Image to Google</li> </ul>"},{"location":"#day2-part2-tensorflow-machine-learning-esp32","title":"Day2: Part2 Tensorflow machine learning ESP32","text":"<p> EloquentTinyML</p> <ul> <li>Machine Learning</li> <li>Data Prediction</li> <li>more..</li> </ul>"},{"location":"preparation/1basic_esp32/","title":"1 Esp 32 \u0e23\u0e48\u0e38\u0e19\u0e15\u0e48\u0e32\u0e07","text":"<p>\u0e15\u0e32\u0e23\u0e32\u0e07\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07 ESP32 \u0e43\u0e19\u0e23\u0e38\u0e48\u0e19\u0e15\u0e48\u0e32\u0e07 \u0e46</p>"},{"location":"preparation/1basic_esp32/#esp32","title":"\u0e2a\u0e23\u0e38\u0e1b ESP32 \u0e23\u0e38\u0e48\u0e19\u0e15\u0e48\u0e32\u0e07 \u0e46","text":""},{"location":"preparation/1basic_esp32/#1-esp32-wroom-32","title":"1. ESP32-WROOM-32","text":"<ul> <li>\u0e0a\u0e34\u0e1b ESP32 \u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Wi-Fi \u0e41\u0e25\u0e30 Bluetooth (\u0e17\u0e31\u0e49\u0e07 Classic \u0e41\u0e25\u0e30 BLE)</li> <li>\u0e21\u0e35 GPIO 34 \u0e1e\u0e34\u0e19, ADC, DAC, SPI, I2C, UART</li> <li>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2b\u0e25\u0e32\u0e22\u0e07\u0e32\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19 (dual-core)</li> <li>\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e31\u0e48\u0e27\u0e44\u0e1b\u0e44\u0e14\u0e49\u0e14\u0e35\u0e43\u0e19\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04 IoT</li> </ul>"},{"location":"preparation/1basic_esp32/#2-esp32-wroom-32u","title":"2. ESP32-WROOM-32U","text":"<ul> <li>\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e1a WROOM-32 \u0e41\u0e15\u0e48\u0e21\u0e35\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e16\u0e2d\u0e14\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e44\u0e14\u0e49</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 Wi-Fi \u0e17\u0e35\u0e48\u0e40\u0e2a\u0e16\u0e35\u0e22\u0e23\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19</li> </ul>"},{"location":"preparation/1basic_esp32/#3-esp32-wrover","title":"3. ESP32-WROVER","text":"<ul> <li>\u0e21\u0e35\u0e1f\u0e35\u0e40\u0e08\u0e2d\u0e23\u0e4c\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a WROOM-32 \u0e41\u0e15\u0e48\u0e21\u0e35 RAM \u0e02\u0e19\u0e32\u0e14 4MB \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e01\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e21\u0e32\u0e01\u0e02\u0e36\u0e49\u0e19 \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e20\u0e32\u0e1e</li> </ul>"},{"location":"preparation/1basic_esp32/#4-esp32-s2","title":"4. ESP32-S2","text":"<ul> <li>CPU \u0e41\u0e1a\u0e1a single-core \u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Wi-Fi \u0e41\u0e15\u0e48\u0e44\u0e21\u0e48\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Bluetooth</li> <li>\u0e1f\u0e35\u0e40\u0e08\u0e2d\u0e23\u0e4c\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e40\u0e0a\u0e48\u0e19 USB OTG, \u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e40\u0e23\u0e47\u0e27\u0e2a\u0e39\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Bluetooth \u0e41\u0e25\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e32\u0e04\u0e32\u0e16\u0e39\u0e01\u0e41\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19</li> </ul>"},{"location":"preparation/1basic_esp32/#5-esp32-c3","title":"5. ESP32-C3","text":"<ul> <li>\u0e43\u0e0a\u0e49 CPU \u0e41\u0e1a\u0e1a RISC-V \u0e41\u0e25\u0e30\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Wi-Fi \u0e41\u0e25\u0e30 Bluetooth Low Energy (BLE)</li> <li>\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e38\u0e48\u0e19\u0e17\u0e35\u0e48\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30\u0e23\u0e32\u0e04\u0e32\u0e16\u0e39\u0e01</li> <li>\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a IoT \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e43\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e17\u0e35\u0e48\u0e15\u0e48\u0e33</li> </ul>"},{"location":"preparation/1basic_esp32/#6-esp32-s3","title":"6. ESP32-S3","text":"<ul> <li>\u0e23\u0e38\u0e48\u0e19\u0e43\u0e2b\u0e21\u0e48\u0e17\u0e35\u0e48\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a AI acceleration \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25 Machine Learning</li> <li>\u0e21\u0e35\u0e17\u0e31\u0e49\u0e07 Wi-Fi \u0e41\u0e25\u0e30 Bluetooth BLE</li> <li>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 neural network \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07</li> </ul>"},{"location":"preparation/1basic_esp32/#esp32-variants","title":"ESP32 Variants","text":"Variant Package Pins Embedded SPI Flash Embedded SPI PSRAM ESP32-D0WD-V3 QFN 5x5 mm\u00b2 48 - - ESP32-D0WDR2-V3 QFN 5x5 mm\u00b2 48 - 2MB ESP32-U4WDH QFN 5x5 mm\u00b2 48 4MB - ESP32-PICO-V3 LGA 7x7 mm\u00b2 48 4MB - ESP32-PICO-V3-02 LGA 7x7 mm\u00b2 48 8MB 2MB ESP32-PICO-D4 LGA 7x7 mm\u00b2 48 4MB - esp32-workshop-1<pre><code>#include &lt;Arduino.h&gt;\n\nuint32_t chipId = 0;\n\nvoid setup() {\n  Serial.begin(115200);\n  while (!Serial) {\n    // wait for serial port to connect\n  }\n\n  // \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e0a\u0e19\u0e34\u0e14\u0e02\u0e2d\u0e07 ESP32\n  String chipModel = ESP.getChipModel();\n  String chipRevision = String(ESP.getChipRevision());\n\n  for (int i = 0; i &lt; 17; i = i + 8) {\n    chipId |= ((ESP.getEfuseMac() &gt;&gt; (40 - i)) &amp; 0xff) &lt;&lt; i;\n  }\n\n  Serial.printf(\"ESP32 Chip model = %s Rev %d\\n\", ESP.getChipModel(), ESP.getChipRevision());\n  Serial.printf(\"This chip has %d cores\\n\", ESP.getChipCores());\n  Serial.print(\"Chip ID: \");\n  Serial.println(chipId);\n\n  // \u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 Flash Memory\n  unsigned long flashSize = ESP.getFlashChipSize(); // Flash size in bytes\n  unsigned long flashSizeKB = flashSize / 1024; // Convert to KB\n  unsigned long flashSizeMB = flashSize / (1024 * 1024); // Convert to MB\n\n  // \u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 PSRAM (\u0e16\u0e49\u0e32\u0e21\u0e35)\n  unsigned long psramSize = ESP.getPsramSize(); // PSRAM size in bytes\n  unsigned long psramSizeKB = psramSize / 1024; // Convert to KB\n  unsigned long psramSizeMB = psramSize / (1024 * 1024); // Convert to MB\n\n  // \u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 RAM\n  unsigned long ramSize = ESP.getFreeHeap(); // Free RAM in bytes\n  unsigned long ramSizeKB = ramSize / 1024; // Convert to KB\n  unsigned long ramSizeMB = ramSize / (1024 * 1024); // Convert to MB\n\n  // \u0e41\u0e2a\u0e14\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 Serial Monitor\n  Serial.println(\"ESP32 Information:\");\n  Serial.print(\"Chip Model: \");\n  Serial.println(chipModel);\n  Serial.print(\"Chip Revision: \");\n  Serial.println(chipRevision);\n  Serial.print(\"Chip ID: \");\n  Serial.println(chipId);\n  Serial.print(\"Flash Size: \");\n  Serial.print(flashSizeMB);\n  Serial.println(\" MB\");\n  Serial.print(\"PSRAM Size: \");\n  if (psramSize &gt; 0) {\n    Serial.print(psramSizeMB);\n    Serial.println(\" MB\");\n  } else {\n    Serial.println(\"No PSRAM\");\n  }\n  Serial.print(\"Free RAM: \");\n  Serial.print(ramSizeMB);\n  Serial.println(\" MB\");\n}\n\nvoid loop() {\n  // \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19 loop\n}\n</code></pre> <p>\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14:</p> <ul> <li>ESP.getChipModel() : \u0e43\u0e0a\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e23\u0e38\u0e48\u0e19\u0e02\u0e2d\u0e07 ESP32</li> <li>ESP.getFlashChipSize() : \u0e43\u0e0a\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e36\u0e07\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 Flash memory</li> <li>ESP.getPsramSize() : \u0e43\u0e0a\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e36\u0e07\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 PSRAM (\u0e16\u0e49\u0e32\u0e21\u0e35)</li> <li>ESP.getFreeHeap() : \u0e43\u0e0a\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e36\u0e07\u0e02\u0e19\u0e32\u0e14 RAM \u0e17\u0e35\u0e48\u0e22\u0e31\u0e07\u0e27\u0e48\u0e32\u0e07\u0e2d\u0e22\u0e39\u0e48</li> </ul> <p>\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e19\u0e35\u0e49\u0e23\u0e31\u0e19\u0e1a\u0e19 ESP32 \u0e04\u0e38\u0e13\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e48\u0e19 \u0e23\u0e38\u0e48\u0e19\u0e02\u0e2d\u0e07\u0e0a\u0e34\u0e1b \u0e02\u0e19\u0e32\u0e14 Flash, PSRAM \u0e41\u0e25\u0e30 RAM \u0e17\u0e35\u0e48\u0e22\u0e31\u0e07\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Serial Monitor.</p> <p>\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e17\u0e4c\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49</p> <p></p> <pre><code>ESP32 Chip model = ESP32-D0WDQ6 Rev 100\nThis chip has 2 cores\nChip ID: 11385660\nESP32 Information:\nChip Model: ESP32-D0WDQ6\nChip Revision: 100\nChip ID: 11385660\nFlash Size: 4 MB\nPSRAM Size: No PSRAM\nFree RAM: 0 MB\n</code></pre> <p></p> <p></p> <p>Pin out </p>"},{"location":"preparation/2basic_esp32_wifi/","title":"2 ESP32 Scan Wifi","text":"esp32-workshop-2.ino<pre><code>#include &lt;WiFi.h&gt;\n\nvoid setup() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 Serial Monitor\n  Serial.begin(115200);\n  while (!Serial) {\n    // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Serial \u0e08\u0e30\u0e1e\u0e23\u0e49\u0e2d\u0e21\n  }\n\n  // \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Wi-Fi (\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e27\u0e49\u0e19\u0e44\u0e27\u0e49\u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d)\n  WiFi.begin(\"your-SSID\", \"your-PASSWORD\"); // \u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d SSID \u0e41\u0e25\u0e30\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi\n\n  // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e44\u0e14\u0e49\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.println(\"Connecting to WiFi...\");\n  }\n\n  // \u0e41\u0e2a\u0e14\u0e07 IP \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\n  Serial.println(\"Connected to WiFi\");\n  Serial.print(\"IP Address: \");\n  Serial.println(WiFi.localIP());\n\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e01\u0e32\u0e23\u0e2a\u0e41\u0e01\u0e19 Wi-Fi\n  Serial.println(\"Scanning for Wi-Fi networks...\");\n\n  // \u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e2b\u0e31\u0e27\u0e15\u0e32\u0e23\u0e32\u0e07\n  Serial.println(\"-----------------------------------------------------------\");\n  Serial.println(\"| No | SSID                | RSSI    | MAC Address       |\");\n  Serial.println(\"-----------------------------------------------------------\");\n\n  int networksFound = WiFi.scanNetworks();\n  if (networksFound == 0) {\n    Serial.println(\"| No networks found                                      |\");\n  } else {\n    for (int i = 0; i &lt; networksFound; i++) {\n      String ssid = WiFi.SSID(i);  // \u0e0a\u0e37\u0e48\u0e2d\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi\n      int rssi = WiFi.RSSI(i);     // \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 RSSI (Strength)\n      String macAddress = WiFi.BSSIDstr(i);  // MAC Address \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\n\n      // \u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e43\u0e19\u0e15\u0e32\u0e23\u0e32\u0e07\n      Serial.print(\"| \");\n      Serial.print(i + 1);                    // \u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\n      Serial.print(\"  | \");\n      Serial.print(ssid);                     // \u0e0a\u0e37\u0e48\u0e2d\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\n      Serial.print(\"  | \");\n      Serial.print(rssi);                     // RSSI (Signal Strength)\n      Serial.print(\"    | \");\n      Serial.print(macAddress);               // MAC Address\n      Serial.println(\" |\");\n    }\n  }\n\n  // \u0e08\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e41\u0e01\u0e19 Wi-Fi\n  Serial.println(\"-----------------------------------------------------------\");\n  Serial.println(\"Scan complete.\");\n\n}\n\nvoid loop() {\n  // \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e2d\u0e30\u0e44\u0e23\u0e43\u0e19 loop\n}\n</code></pre>"},{"location":"preparation/3basic_esp32_ap_mode/","title":"3 ESP32 AP Mode","text":"<p>ESP32 \u0e42\u0e2b\u0e21\u0e14 AP \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e43\u0e2b\u0e49\u0e42\u0e21\u0e14\u0e39\u0e25 ESP32 \u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 \u0e08\u0e38\u0e14\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi (Access Point) \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e40\u0e23\u0e32\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e19\u0e32\u0e14\u0e40\u0e25\u0e47\u0e01 \u0e42\u0e14\u0e22 ESP32 \u0e08\u0e30\u0e1b\u0e25\u0e48\u0e2d\u0e22\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 Wi-Fi \u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e40\u0e2d\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e40\u0e0a\u0e48\u0e19 \u0e2a\u0e21\u0e32\u0e23\u0e4c\u0e17\u0e42\u0e1f\u0e19, \u0e41\u0e17\u0e47\u0e1a\u0e40\u0e25\u0e47\u0e15 \u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c IoT \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e44\u0e14\u0e49\u0e42\u0e14\u0e22\u0e15\u0e23\u0e07</p> esp32-workshop-3.ino<pre><code>#include &lt;WiFi.h&gt;\n\nconst char *ssid = \"ESP32-AP\";          // \u0e0a\u0e37\u0e48\u0e2d SSID \u0e02\u0e2d\u0e07 AP\nconst char *password = \"123456789\";     // \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07 AP (\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e27\u0e49\u0e19\u0e27\u0e48\u0e32\u0e07\u0e44\u0e27\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e21\u0e48\u0e43\u0e2b\u0e49\u0e21\u0e35\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19)\n\nvoid setup() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 Serial Monitor\n  Serial.begin(115200);\n  while (!Serial) {\n    // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Serial \u0e08\u0e30\u0e1e\u0e23\u0e49\u0e2d\u0e21\n  }\n\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e42\u0e2b\u0e21\u0e14 Access Point\n  WiFi.softAP(ssid, password);  // \u0e2a\u0e23\u0e49\u0e32\u0e07 Access Point \u0e14\u0e49\u0e27\u0e22 SSID \u0e41\u0e25\u0e30\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\n\n  // \u0e41\u0e2a\u0e14\u0e07 IP Address \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 AP\n  Serial.println(\"Access Point Started\");\n  Serial.print(\"IP Address: \");\n  Serial.println(WiFi.softAPIP());  // \u0e41\u0e2a\u0e14\u0e07 IP Address \u0e02\u0e2d\u0e07 AP\n}\n\nvoid loop() {\n  // \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1c\u0e39\u0e49\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a AP \u0e44\u0e14\u0e49\n  Serial.print(\"Number of connected devices: \");\n  Serial.println(WiFi.softAPgetStationNum());  // \u0e08\u0e33\u0e19\u0e27\u0e19\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\n\n  delay(5000);  // \u0e2b\u0e22\u0e38\u0e14\u0e1e\u0e31\u0e01 5 \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35\n}\n</code></pre> <p></p>"},{"location":"preparation/4basic_esp32_sp_mode/","title":"4 ESP 32 SP mode","text":"<p>\u0e42\u0e2b\u0e21\u0e14 Station (STA) \u0e2b\u0e23\u0e37\u0e2d SP Mode \u0e43\u0e19 ESP32 \u0e04\u0e37\u0e2d\u0e42\u0e2b\u0e21\u0e14\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e17\u0e35\u0e48\u0e21\u0e35\u0e2d\u0e22\u0e39\u0e48\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e48\u0e19 Wi-Fi Router \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 ESP32 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e15\u0e48\u0e32\u0e07 \u0e46 \u0e1c\u0e48\u0e32\u0e19 Wi-Fi. \u0e43\u0e19\u0e42\u0e2b\u0e21\u0e14\u0e19\u0e35\u0e49 ESP32 \u0e08\u0e30\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 \u0e25\u0e39\u0e01\u0e02\u0e48\u0e32\u0e22 (Client) \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Access Point (AP) \u0e17\u0e35\u0e48\u0e21\u0e35\u0e2d\u0e22\u0e39\u0e48.</p> esp32_workshop_4.ino<pre><code>#include &lt;WiFi.h&gt;\n\nconst char *ssid = \"your-SSID\";          // \u0e0a\u0e37\u0e48\u0e2d SSID \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\nconst char *password = \"your-PASSWORD\";  // \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi\n\nvoid setup() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 Serial Monitor\n  Serial.begin(115200);\n  while (!Serial) {\n    // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Serial \u0e08\u0e30\u0e1e\u0e23\u0e49\u0e2d\u0e21\n  }\n\n  // \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Wi-Fi \u0e43\u0e19\u0e42\u0e2b\u0e21\u0e14 Station\n  WiFi.begin(ssid, password);  // \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a SSID \u0e41\u0e25\u0e30\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\n\n  // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 ESP32 \u0e08\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Wi-Fi\n  Serial.println(\"Connecting to WiFi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);  // \u0e23\u0e2d 1 \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35\n    Serial.print(\".\");  // \u0e41\u0e2a\u0e14\u0e07\u0e08\u0e38\u0e14\u0e43\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e23\u0e2d\n  }\n\n  // \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\n  Serial.println(\"\");\n  Serial.println(\"Connected to WiFi\");\n  Serial.print(\"IP Address: \");\n  Serial.println(WiFi.localIP());  // \u0e41\u0e2a\u0e14\u0e07 IP Address \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e08\u0e32\u0e01 Wi-Fi Router\n}\n\nvoid loop() {\n  // \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi \u0e43\u0e19\u0e42\u0e04\u0e49\u0e14\u0e19\u0e35\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e40\u0e0a\u0e48\u0e19 HTTP Requests, MQTT, etc.\n}\n</code></pre>"},{"location":"preparation/4basic_esp32_sp_mode/#refactor-code","title":"Refactor Code","text":"esp32_workshop_4_1.ino<pre><code>#include &lt;WiFi.h&gt;\n\nconst char *ssid = \"your-SSID\";          // \u0e0a\u0e37\u0e48\u0e2d SSID \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\nconst char *password = \"your-PASSWORD\";  // \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi\n\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 initWiFi \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Wi-Fi\nvoid initWiFi() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi\n  WiFi.begin(ssid, password);\n\n  // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\n  Serial.println(\"Connecting to WiFi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);  // \u0e23\u0e2d 1 \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35\n    Serial.print(\".\");  // \u0e41\u0e2a\u0e14\u0e07\u0e08\u0e38\u0e14\u0e43\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e23\u0e2d\n  }\n\n  // \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\n  Serial.println(\"\");\n  Serial.println(\"Connected to WiFi\");\n  Serial.print(\"IP Address: \");\n  Serial.println(WiFi.localIP());  // \u0e41\u0e2a\u0e14\u0e07 IP Address \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e08\u0e32\u0e01 Wi-Fi Router\n}\n\nvoid setup() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 Serial Monitor\n  Serial.begin(115200);\n  while (!Serial) {\n    // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Serial \u0e08\u0e30\u0e1e\u0e23\u0e49\u0e2d\u0e21\n  }\n\n  // \u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 initWiFi \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi\n  initWiFi();\n}\n\nvoid loop() {\n  // \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 loop \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b\n}\n</code></pre> <p>\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 Wi-Fi event callback \u0e43\u0e19 ESP32 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2a\u0e16\u0e32\u0e19\u0e30\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi \u0e42\u0e14\u0e22\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e43\u0e2b\u0e21\u0e48\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e16\u0e39\u0e01\u0e15\u0e31\u0e14\u0e02\u0e32\u0e14\u0e44\u0e1b. \u0e04\u0e38\u0e13\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 WiFi.onEvent() \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e01\u0e33\u0e2b\u0e19\u0e14 callback function \u0e17\u0e35\u0e48\u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e23\u0e35\u0e22\u0e01\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e34\u0e14\u0e40\u0e2b\u0e15\u0e38\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a Wi-Fi, \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e15\u0e31\u0e14\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d.</p> <p>\u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49, \u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Wi-Fi event callback \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 ESP32 \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi \u0e43\u0e2b\u0e21\u0e48\u0e42\u0e14\u0e22\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e16\u0e39\u0e01\u0e15\u0e31\u0e14\u0e02\u0e32\u0e14.</p> <p>\u0e42\u0e04\u0e49\u0e14\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07: \u0e43\u0e0a\u0e49 WiFi.onEvent() \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi \u0e43\u0e2b\u0e21\u0e48\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e34\u0e14\u0e01\u0e32\u0e23\u0e15\u0e31\u0e14\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d</p> esp32_workshop_4_2.ino<pre><code>#include &lt;WiFi.h&gt;\n\nconst char *ssid = \"TrueGigatexFiber_uS7_2.4G\";          // \u0e0a\u0e37\u0e48\u0e2d SSID \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\nconst char *password = \"itbakery@9\";  // \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi\n\n// \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 DNS\nIPAddress primaryDNS(8, 8, 8, 8);  // Google DNS\nIPAddress secondaryDNS(8, 8, 4, 4); // Google Secondary DNS (\u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23)\n\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi\nvoid initWiFi() {\n  // \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32 IP, Gateway, Subnet Mask, DNS\n  WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE, primaryDNS, secondaryDNS);\n  WiFi.begin(ssid, password);\n\n  // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\n  Serial.println(\"Connecting to WiFi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);  // \u0e23\u0e2d 1 \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35\n    Serial.print(\".\");  // \u0e41\u0e2a\u0e14\u0e07\u0e08\u0e38\u0e14\u0e43\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e23\u0e2d\n  }\n\n  // \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\n  Serial.println(\"\");\n  Serial.println(\"Connected to WiFi\");\n  Serial.print(\"IP Address: \");\n  Serial.println(WiFi.localIP());  // \u0e41\u0e2a\u0e14\u0e07 IP Address \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e08\u0e32\u0e01 Wi-Fi Router\n}\n\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a Wi-Fi events\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 callback \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Wi-Fi events\nvoid WiFiEvent(WiFiEvent_t event) {\n  switch (event) {\n    case IP_EVENT_STA_GOT_IP:\n      Serial.println(\"Got IP address\");\n      Serial.print(\"IP Address: \");\n      Serial.println(WiFi.localIP());\n      break;\n    case WIFI_EVENT_STA_DISCONNECTED:\n      Serial.println(\"Disconnected from Wi-Fi\");\n      initWiFi();\n      break;\n    default:\n      break;\n  }\n}\n\nvoid setup() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 Serial Monitor\n  Serial.begin(115200);\n  while (!Serial) {\n    // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Serial \u0e08\u0e30\u0e1e\u0e23\u0e49\u0e2d\u0e21\n  }\n\n  // \u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 Wi-Fi event callback\n  WiFi.onEvent(WiFiEvent);\n\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi\n  initWiFi();\n}\n\nvoid loop() {\n  // \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e44\u0e14\u0e49\u0e43\u0e19 loop\n}\n</code></pre> <p>\u0e04\u0e27\u0e32\u0e21\u0e2b\u0e21\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e1b while: \u0e25\u0e39\u0e1b while \u0e08\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e15\u0e23\u0e32\u0e1a\u0e43\u0e14\u0e17\u0e35\u0e48\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e19\u0e25\u0e39\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e08\u0e23\u0e34\u0e07 (True). \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02\u0e40\u0e1b\u0e47\u0e19 \u0e40\u0e17\u0e47\u0e08 (False), \u0e25\u0e39\u0e1b\u0e08\u0e30\u0e2b\u0e22\u0e38\u0e14\u0e17\u0e33\u0e07\u0e32\u0e19.</p>"},{"location":"preparation/4basic_esp32_sp_mode/#and","title":"\u0e15\u0e32\u0e23\u0e32\u0e07\u0e04\u0e27\u0e32\u0e21\u0e08\u0e23\u0e34\u0e07\u0e02\u0e2d\u0e07 <code>&amp;&amp;</code> (AND)","text":"\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02 1 (A) \u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02 2 (B) A &amp;&amp; B False False False False True False True False False True True True esp32_workshop_4_3.ino<pre><code>#include &lt;WiFi.h&gt;\n\nconst char *ssid = \"TrueGigatexFiber_uS7_2.4G\";          // \u0e0a\u0e37\u0e48\u0e2d SSID \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\nconst char *password = \"itbakery@9\";  // \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi\n\n// \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 DNS\nIPAddress primaryDNS(8, 8, 8, 8);  // Google DNS\nIPAddress secondaryDNS(8, 8, 4, 4); // Google Secondary DNS (\u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23)\n\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi\nvoid initWiFi() {\n  // \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32 IP, Gateway, Subnet Mask, DNS\n  WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE, primaryDNS, secondaryDNS);\n  WiFi.begin(ssid, password);\n\n  int try_num = 0;  // \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e47\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e17\u0e35\u0e48\u0e1e\u0e22\u0e32\u0e22\u0e32\u0e21\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\n  int max_tries = 10;  // \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e17\u0e35\u0e48\u0e1e\u0e22\u0e32\u0e22\u0e32\u0e21\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\n\n  Serial.println(\"Connecting to WiFi...\");\n\n  // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Wi-Fi \u0e08\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d \u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e01\u0e34\u0e19\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\n  while (WiFi.status() != WL_CONNECTED &amp;&amp; try_num &lt; max_tries) {\n    delay(1000);  // \u0e23\u0e2d 1 \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35\n    Serial.print(\".\");  // \u0e41\u0e2a\u0e14\u0e07\u0e08\u0e38\u0e14\u0e43\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e23\u0e2d\n    try_num++;  // \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\n  }\n\n  // \u0e2b\u0e32\u0e01\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\n  if (WiFi.status() == WL_CONNECTED) {\n    Serial.println(\"\");\n    Serial.println(\"Connected to WiFi\");\n    Serial.print(\"IP Address: \");\n    Serial.println(WiFi.localIP());  // \u0e41\u0e2a\u0e14\u0e07 IP Address \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e08\u0e32\u0e01 Wi-Fi Router\n  } else {\n    // \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e44\u0e14\u0e49\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e1e\u0e22\u0e32\u0e22\u0e32\u0e21 10 \u0e04\u0e23\u0e31\u0e49\u0e07\n    Serial.println(\"\");\n    Serial.println(\"Failed to connect to Wi-Fi after 10 attempts.\");\n  }\n}\n\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a Wi-Fi events\n// \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 callback \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Wi-Fi events\nvoid WiFiEvent(WiFiEvent_t event) {\n  switch (event) {\n    case IP_EVENT_STA_GOT_IP:\n      Serial.println(\"Got IP address\");\n      Serial.print(\"IP Address: \");\n      Serial.println(WiFi.localIP());\n      break;\n    case WIFI_EVENT_STA_DISCONNECTED:\n      Serial.println(\"Disconnected from Wi-Fi\");\n      initWiFi();\n      break;\n    default:\n      break;\n  }\n}\n\nvoid setup() {\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 Serial Monitor\n  Serial.begin(115200);\n  while (!Serial) {\n    // \u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 Serial \u0e08\u0e30\u0e1e\u0e23\u0e49\u0e2d\u0e21\n  }\n\n  // \u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 Wi-Fi event callback\n  WiFi.onEvent(WiFiEvent);\n\n  // \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi\n  initWiFi();\n}\n\nvoid loop() {\n  // \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e44\u0e14\u0e49\u0e43\u0e19 loop\n}\n</code></pre>"},{"location":"preparation/4basic_esp32_sp_mode/#_1","title":"\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e17\u0e35\u0e48\u0e04\u0e32\u0e14\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49:","text":"<p>\u0e2b\u0e32\u0e01\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08:</p> <pre><code>Connecting to WiFi...\n..........\nConnected to WiFi\nIP Address: 192.168.1.100\n</code></pre> <p>\u0e2b\u0e32\u0e01\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e44\u0e14\u0e49\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 10 \u0e04\u0e23\u0e31\u0e49\u0e07:</p> <pre><code>Connecting to WiFi...\n..........\nFailed to connect to Wi-Fi after 10 attempts.\n</code></pre>"},{"location":"preparation/5tensorflow_iris/","title":"5 tensorflow lite ESP32","text":""},{"location":"preparation/5tensorflow_iris/#eloquenttinyml","title":"EloquentTinyML","text":"<p>\u0e40\u0e1b\u0e47\u0e19\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e25\u0e30\u0e1b\u0e23\u0e31\u0e1a\u0e43\u0e0a\u0e49\u0e42\u0e21\u0e40\u0e14\u0e25\u0e41\u0e21\u0e0a\u0e0a\u0e35\u0e19\u0e40\u0e25\u0e34\u0e23\u0e4c\u0e19\u0e19\u0e34\u0e07\u0e02\u0e19\u0e32\u0e14\u0e40\u0e25\u0e47\u0e01\u0e1a\u0e19\u0e44\u0e21\u0e42\u0e04\u0e23\u0e04\u0e2d\u0e19\u0e42\u0e17\u0e23\u0e25\u0e40\u0e25\u0e2d\u0e23\u0e4c \u0e40\u0e0a\u0e48\u0e19 ESP32 \u0e41\u0e25\u0e30 Arduino \u0e42\u0e14\u0e22\u0e40\u0e19\u0e49\u0e19\u0e04\u0e27\u0e32\u0e21\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e43\u0e19\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 TinyML (Machine Learning \u0e02\u0e19\u0e32\u0e14\u0e40\u0e25\u0e47\u0e01) \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e07\u0e32\u0e19 IoT \u0e41\u0e25\u0e30 embedded systems</p> <p>\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34\u0e40\u0e14\u0e48\u0e19\u0e02\u0e2d\u0e07 EloquentTinyML</p> <ol> <li>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a TensorFlow Lite for Microcontrollers (TFLM):</li> <li>\u0e43\u0e0a\u0e49\u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a\u0e42\u0e21\u0e40\u0e14\u0e25 TFLM \u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e</li> <li>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e42\u0e2b\u0e25\u0e14\u0e42\u0e21\u0e40\u0e14\u0e25 .tflite \u0e41\u0e1a\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e14\u0e32\u0e22</li> <li>\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e07\u0e48\u0e32\u0e22:</li> <li>\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e21\u0e32\u0e43\u0e2b\u0e49\u0e1c\u0e39\u0e49\u0e43\u0e0a\u0e49\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e04\u0e49\u0e14 AI/ML \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e2a\u0e30\u0e14\u0e27\u0e01</li> <li>\u0e21\u0e35 API \u0e17\u0e35\u0e48\u0e01\u0e23\u0e30\u0e0a\u0e31\u0e1a\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e2b\u0e25\u0e14\u0e41\u0e25\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e1c\u0e25 (inference)</li> <li>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13:</li> <li>\u0e21\u0e35\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 preprocessing \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e01\u0e23\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 (filters) \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e04\u0e33\u0e19\u0e27\u0e13\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34 (feature extraction) \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 \u0e40\u0e0a\u0e48\u0e19 \u0e40\u0e2a\u0e35\u0e22\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e0b\u0e47\u0e19\u0e40\u0e0b\u0e2d\u0e23\u0e4c</li> <li> <p>\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21: - \u0e16\u0e39\u0e01\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e43\u0e2b\u0e49\u0e17\u0e33\u0e07\u0e32\u0e19\u0e43\u0e19\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e17\u0e35\u0e48\u0e08\u0e33\u0e01\u0e31\u0e14\u0e02\u0e2d\u0e07\u0e44\u0e21\u0e42\u0e04\u0e23\u0e04\u0e2d\u0e19\u0e42\u0e17\u0e23\u0e25\u0e40\u0e25\u0e2d\u0e23\u0e4c    \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a Arduino IDE \u0e41\u0e25\u0e30\u0e41\u0e1e\u0e25\u0e15\u0e1f\u0e2d\u0e23\u0e4c\u0e21\u0e2d\u0e37\u0e48\u0e19:</p> </li> <li> <p>\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a Arduino IDE \u0e2b\u0e23\u0e37\u0e2d\u0e41\u0e1e\u0e25\u0e15\u0e1f\u0e2d\u0e23\u0e4c\u0e21\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e44\u0e21\u0e42\u0e04\u0e23\u0e04\u0e2d\u0e19\u0e42\u0e17\u0e23\u0e25\u0e40\u0e25\u0e2d\u0e23\u0e4c\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22</p> </li> </ol> <p></p> <p>https://github.com/eloquentarduino/EloquentTinyML/tree/main/examples/IrisExample</p>"},{"location":"preparation/5tensorflow_iris/#eloquenttinyml_1","title":"\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 EloquentTinyML \u0e42\u0e14\u0e22\u0e2a\u0e23\u0e38\u0e1b","text":""},{"location":"preparation/5tensorflow_iris/#1","title":"1. \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e40\u0e17\u0e23\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e1a\u0e19\u0e04\u0e2d\u0e21\u0e1e\u0e34\u0e27\u0e40\u0e15\u0e2d\u0e23\u0e4c","text":"<ul> <li>\u0e43\u0e0a\u0e49\u0e41\u0e1e\u0e25\u0e15\u0e1f\u0e2d\u0e23\u0e4c\u0e21\u0e40\u0e0a\u0e48\u0e19 TensorFlow \u0e2b\u0e23\u0e37\u0e2d scikit-learn \u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e40\u0e17\u0e23\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25</li> <li>\u0e2b\u0e32\u0e01\u0e43\u0e0a\u0e49 TensorFlow \u0e43\u0e2b\u0e49\u0e41\u0e1b\u0e25\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\u0e40\u0e1b\u0e47\u0e19 <code>.tflite</code> (TensorFlow Lite format)</li> </ul> <pre><code># \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 TensorFlow \u0e40\u0e1b\u0e47\u0e19 .tflite\nimport tensorflow as tf\n\nconverter = tf.lite.TFLiteConverter.from_saved_model('model_path')\ntflite_model = converter.convert()\n\nwith open('model.tflite', 'wb') as f:\n    f.write(tflite_model)\n</code></pre>"},{"location":"preparation/5tensorflow_iris/#2-tflite-c","title":"2. \u0e41\u0e1b\u0e25\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 .tflite \u0e40\u0e1b\u0e47\u0e19\u0e44\u0e1f\u0e25\u0e4c C++","text":"<ul> <li>\u0e43\u0e0a\u0e49\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e40\u0e0a\u0e48\u0e19 xxd \u0e2b\u0e23\u0e37\u0e2d EloquentTinyML Model Converter \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e1b\u0e25\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\u0e40\u0e1b\u0e47\u0e19\u0e42\u0e04\u0e49\u0e14 C++</li> </ul> <pre><code>xxd -i model.tflite &gt; model.h\n</code></pre>"},{"location":"preparation/5tensorflow_iris/#3-eloquenttinyml","title":"3 \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 EloquentTinyML","text":"<ul> <li>\u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e1c\u0e48\u0e32\u0e19 Arduino Library Manager \u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e42\u0e14\u0e22\u0e15\u0e23\u0e07\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e01\u0e15\u0e4c</li> </ul>"},{"location":"preparation/5tensorflow_iris/#4-arduino-ide-platformio","title":"4 \u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e42\u0e04\u0e49\u0e14\u0e1a\u0e19 Arduino IDE \u0e2b\u0e23\u0e37\u0e2d PlatformIO","text":"<ul> <li>\u0e23\u0e27\u0e21\u0e44\u0e1f\u0e25\u0e4c\u0e42\u0e21\u0e40\u0e14\u0e25 (model.h) \u0e43\u0e19\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e01\u0e15\u0e4c</li> <li>\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e04\u0e49\u0e14\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e2b\u0e25\u0e14\u0e42\u0e21\u0e40\u0e14\u0e25\u0e41\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25</li> </ul>"},{"location":"preparation/5tensorflow_iris/#structure","title":"\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Structure \u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21","text":"tensorflow_eloquenttinyml.h<pre><code>#include &lt;EloquentTinyML.h&gt;\n#include \"model.h\"  // \u0e42\u0e21\u0e40\u0e14\u0e25 .h \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e44\u0e1f\u0e25\u0e4c .tflite\n\n#define FEATURE_SIZE 3  // \u0e08\u0e33\u0e19\u0e27\u0e19\u0e1f\u0e35\u0e40\u0e08\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e42\u0e21\u0e40\u0e14\u0e25\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\nEloquent::TinyML::TfLite&lt;FEATURE_SIZE, 2&gt; ml;  // \u0e02\u0e19\u0e32\u0e14\u0e1f\u0e35\u0e40\u0e08\u0e2d\u0e23\u0e4c \u0e41\u0e25\u0e30\u0e08\u0e33\u0e19\u0e27\u0e19\u0e04\u0e25\u0e32\u0e2a\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\n\nvoid setup() {\n    Serial.begin(9600);\n    ml.begin(model_data);  // \u0e42\u0e2b\u0e25\u0e14\u0e42\u0e21\u0e40\u0e14\u0e25\n}\n\nvoid loop() {\n    float input[FEATURE_SIZE] = {1.0, 2.0, 3.0};  // \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e02\u0e49\u0e32\n    float prediction = ml.predictClass(input);   // \u0e17\u0e33\u0e19\u0e32\u0e22\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\n    Serial.println(prediction);  // \u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\n}\n</code></pre>"},{"location":"preparation/5tensorflow_iris/#library","title":"Library \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49","text":"<ul> <li>EloquentTinyML   </li> <li>tflm_esp32   </li> <li>tflm_cortexm   </li> </ul> tensorflow_irismodel.h<pre><code>/**\n * Run a TensorFlow model to predict the IRIS dataset\n * For a complete guide, visit\n * https://eloquentarduino.com/tensorflow-lite-esp32\n */\n// replace with your own model\n// include BEFORE &lt;eloquent_tinyml.h&gt;!\n#include \"irisModel.h\"\n// include the runtime specific for your board\n// either tflm_esp32 or tflm_cortexm\n#include &lt;tflm_esp32.h&gt;\n// now you can include the eloquent tinyml wrapper\n#include &lt;eloquent_tinyml.h&gt;\n\n// this is trial-and-error process\n// when developing a new model, start with a high value\n// (e.g. 10000), then decrease until the model stops\n// working as expected\n#define ARENA_SIZE 2000\n\nEloquent::TF::Sequential&lt;TF_NUM_OPS, ARENA_SIZE&gt; tf;\n\n/**\n *\n */\nvoid setup() {\n    Serial.begin(115200);\n    delay(3000);\n    Serial.println(\"__TENSORFLOW IRIS__\");\n\n    // configure input/output\n    // (not mandatory if you generated the .h model\n    // using the everywhereml Python package)\n    tf.setNumInputs(4);\n    tf.setNumOutputs(3);\n    // add required ops\n    // (not mandatory if you generated the .h model\n    // using the everywhereml Python package)\n    tf.resolver.AddFullyConnected();\n    tf.resolver.AddSoftmax();\n\n    while (!tf.begin(irisModel).isOk())\n        Serial.println(tf.exception.toString());\n}\n\n\nvoid loop() {\n    // classify class 0\n    if (!tf.predict(x0).isOk()) {\n        Serial.println(tf.exception.toString());\n        return;\n    }\n\n    Serial.print(\"expcted class 0, predicted class \");\n    Serial.println(tf.classification);\n\n    // classify class 1\n    if (!tf.predict(x1).isOk()) {\n        Serial.println(tf.exception.toString());\n        return;\n    }\n\n    Serial.print(\"expcted class 1, predicted class \");\n    Serial.println(tf.classification);\n\n    // classify class 2\n    if (!tf.predict(x2).isOk()) {\n        Serial.println(tf.exception.toString());\n        return;\n    }\n\n    Serial.print(\"expcted class 2, predicted class \");\n    Serial.println(tf.classification);\n\n    // how long does it take to run a single prediction?\n    Serial.print(\"It takes \");\n    Serial.print(tf.benchmark.microseconds());\n    Serial.println(\"us for a single prediction\");\n\n    delay(1000);\n}\n</code></pre>"},{"location":"preparation/5tensorflow_iris/#code","title":"\u0e2a\u0e23\u0e38\u0e1b\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 code","text":""},{"location":"preparation/install_linux/","title":"install on linux (opensuse)","text":""},{"location":"preparation/install_linux/#install-package","title":"install package","text":""},{"location":"preparation/install_linux/#installation-by-linx-package","title":"installation by linx package","text":"<pre><code>sudo zypper in python311-platformio\n</code></pre> <p>The pio command is part of PlatformIO Core and is installed via Python's package manager, pip. Ensure you have Python 3.6 or newer installed.</p> <ul> <li>verify installation</li> </ul> package installation<pre><code>$ pip --version\nPlatformIO Core, version 6.1.16\n\n$ which pio\n/usr/bin/pio\n</code></pre>"},{"location":"preparation/install_linux/#install-via-platformio-ide-integrated","title":"Install via PlatformIO IDE (Integrated)","text":"<p>If you're using VS Code or another IDE with PlatformIO, the pio command is included.</p> <p>Steps:</p> <ol> <li>Install the PlatformIO IDE extension in your editor.</li> <li>Open the PlatformIO terminal (look for the PlatformIO icon in your IDE).</li> <li>Use the pio command directly from the terminal inside the IDE.</li> </ol> <p></p>"},{"location":"preparation/install_linux/#add-pio-to-path-for-linuxmacos","title":"Add pio to PATH (for linux/MacOS)","text":"<p>If the pio command isn't recognized, ensure it's in your system's PATH. Add the Python Scripts directory (or equivalent) to your environment's PATH.</p> set environment<pre><code>export PATH=$PATH:~/.platformio/penv/bin\n\nsource ~/.bashrc\n</code></pre>"},{"location":"preparation/install_linux/#search-library","title":"Search library","text":"<pre><code>pio lib search tensorflow\n</code></pre> <ul> <li> <p>Search tensorflow in terminal   </p> </li> <li> <p>Search tensorflow in editor</p> </li> </ul> <p></p>"},{"location":"preparation/install_linux/#tersorflow-can-that-can-use","title":"Tersorflow can that can use?","text":"<ol> <li> <p>For ESP32 Exclusively:    Go with <code>tanakamasayuki/TensorFlowLite_ESP32</code>, as it is specifically tailored to the ESP32 architecture, making it lightweight and likely easier to set up.</p> </li> <li> <p>For Long-Term Projects or Adafruit Ecosystem:    Choose <code>adafruit/Adafruit TensorFlow Lite</code> because it is actively maintained, supports more features, and benefits from regular updates. However, it might have extra abstractions or dependencies that are unnecessary for ESP32-specific projects.</p> </li> <li> <p>project structure</p> </li> </ol> project structure<pre><code>\ud83d\udcc1 MyTensorFlowProject\n\u251c\u2500\u2500 \ud83d\udcc1 include\n\u2502   \u2514\u2500\u2500 model.h (your TensorFlow Lite model header)\n\u251c\u2500\u2500 \ud83d\udcc1 lib\n\u2502   \u2514\u2500\u2500 (custom libraries, if any)\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u2514\u2500\u2500 main.cpp (your main application code)\n\u251c\u2500\u2500 platformio.ini (PlatformIO configuration file)\n\u2514\u2500\u2500 \ud83d\udcc1 test\n    \u2514\u2500\u2500 (optional test cases)\n</code></pre> <ul> <li>example platformio.ini Configuration</li> </ul> platformio.ini<pre><code>[env:esp32doit-devkit-v1]\nplatform = espressif32\nboard = esp32doit-devkit-v1\nframework = arduino\nlib_deps =\n    adafruit/Adafruit TensorFlow Lite\nmonitor_speed = 115200\n</code></pre> <p>```c title=\"main.cpp</p>"},{"location":"preparation/install_linux/#include","title":"include","text":""},{"location":"preparation/install_linux/#include-tensorflowliteh-adafruit-tensorflow-lite-header","title":"include \"TensorFlowLite.h\" // Adafruit TensorFlow Lite header <p>// Include TensorFlow Lite headers</p>","text":""},{"location":"preparation/install_linux/#include-tensorflowlitemicroall_ops_resolverh","title":"include \"tensorflow/lite/micro/all_ops_resolver.h\"","text":""},{"location":"preparation/install_linux/#include-tensorflowlitemicromicro_interpreterh","title":"include \"tensorflow/lite/micro/micro_interpreter.h\"","text":""},{"location":"preparation/install_linux/#include-tensorflowliteschemaschema_generatedh","title":"include \"tensorflow/lite/schema/schema_generated.h\"","text":""},{"location":"preparation/install_linux/#include-tensorflowliteversionh","title":"include \"tensorflow/lite/version.h\" <p>// Include your TensorFlow Lite model as a byte array</p>","text":""},{"location":"preparation/install_linux/#include-modelh","title":"include \"model.h\" <p>// Memory for TensorFlow Lite constexpr int tensor_arena_size = 10240; // Adjust size as needed uint8_t tensor_arena[tensor_arena_size];</p> <p>// TensorFlow Lite variables tflite::MicroInterpreter interpreter; tflite::AllOpsResolver resolver; TfLiteTensor input; TfLiteTensor* output;</p> <p>void setup() {     Serial.begin(115200);     delay(1000); // Wait for Serial monitor     Serial.println(\"Adafruit TensorFlow Lite Example!\");</p> <pre><code>// Load the TensorFlow Lite model\nconst tflite::Model* model = tflite::GetModel(g_model);\nif (model-&gt;version() != TFLITE_SCHEMA_VERSION) {\n    Serial.printf(\"Model schema version %d doesn't match supported version %d\\n\", model-&gt;version(), TFLITE_SCHEMA_VERSION);\n    while (1);\n}\n\n// Create the TensorFlow Lite interpreter\nstatic tflite::MicroInterpreter static_interpreter(model, resolver, tensor_arena, tensor_arena_size, nullptr);\ninterpreter = &amp;static_interpreter;\n\n// Allocate tensors\nif (interpreter-&gt;AllocateTensors() != kTfLiteOk) {\n    Serial.println(\"Failed to\n</code></pre> <p>```</p>","text":""},{"location":"preparation/platformio/","title":"Create project platform io","text":""},{"location":"webcam/1set_arduino_ide_webcam/","title":"1 \u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 Board ESP32 WebCam","text":"<p>\u0e42\u0e1b\u0e23\u0e40\u0e0b\u0e2a\u0e40\u0e0b\u0e2d\u0e23\u0e4c ESP32-S SP32-S \u0e21\u0e35\u0e44\u0e21\u0e42\u0e04\u0e23\u0e42\u0e1b\u0e23\u0e40\u0e0b\u0e2a\u0e40\u0e0b\u0e2d\u0e23\u0e4c Tensilica Xtensa\u00ae LX6 \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e41\u0e01\u0e19\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e41\u0e1a\u0e1a 32 \u0e1a\u0e34\u0e15\u0e08\u0e33\u0e19\u0e27\u0e19\u0e2a\u0e2d\u0e07\u0e41\u0e01\u0e19\u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e40\u0e23\u0e47\u0e27\u0e2a\u0e39\u0e07\u0e16\u0e36\u0e07 240 MHz! \u0e2a\u0e34\u0e48\u0e07\u0e19\u0e35\u0e49\u0e17\u0e33\u0e43\u0e2b\u0e49 ESP32-S \u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e1e\u0e25\u0e31\u0e07\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e2a\u0e39\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d \u0e01\u0e32\u0e23\u0e08\u0e14\u0e08\u0e33\u0e43\u0e1a\u0e2b\u0e19\u0e49\u0e32 \u0e41\u0e25\u0e30\u0e41\u0e21\u0e49\u0e01\u0e23\u0e30\u0e17\u0e31\u0e48\u0e07\u0e1b\u0e31\u0e0d\u0e0d\u0e32\u0e1b\u0e23\u0e30\u0e14\u0e34\u0e29\u0e10\u0e4c (AI)</p> <p></p> <p>\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33 \u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e34\u0e48\u0e07\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19 ESP32-S \u0e08\u0e36\u0e07\u0e21\u0e32\u0e1e\u0e23\u0e49\u0e2d\u0e21 RAM \u0e20\u0e32\u0e22\u0e43\u0e19\u0e02\u0e19\u0e32\u0e14 520 \u0e01\u0e34\u0e42\u0e25\u0e44\u0e1a\u0e15\u0e4c\u0e40\u0e15\u0e47\u0e21 \u0e0b\u0e36\u0e48\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19\u0e0a\u0e34\u0e1b\u0e15\u0e31\u0e27\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e01\u0e31\u0e1a\u0e2a\u0e48\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e02\u0e2d\u0e07\u0e0a\u0e34\u0e1b\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 RAM \u0e20\u0e32\u0e22\u0e43\u0e19\u0e2d\u0e32\u0e08\u0e44\u0e21\u0e48\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 RAM \u0e21\u0e32\u0e01 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19 ESP32-CAM \u0e08\u0e36\u0e07\u0e40\u0e1e\u0e34\u0e48\u0e21 PSRAM (Pseudo-Static RAM) \u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e02\u0e19\u0e32\u0e14 4 MB \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e02\u0e22\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e38\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e32\u0e01\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e40\u0e2a\u0e35\u0e22\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e23\u0e32\u0e1f\u0e34\u0e01\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e2a\u0e39\u0e07</p> <p>\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e19\u0e35\u0e49\u0e08\u0e30\u0e44\u0e23\u0e49\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2b\u0e32\u0e01\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e41\u0e25\u0e30\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 ESP32-S \u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e21\u0e32\u0e43\u0e2b\u0e49\u0e42\u0e14\u0e14\u0e40\u0e14\u0e48\u0e19\u0e43\u0e19\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49\u0e14\u0e49\u0e27\u0e22\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e41\u0e1f\u0e25\u0e0a\u0e1a\u0e19\u0e0a\u0e34\u0e1b\u0e02\u0e19\u0e32\u0e14 4 MB</p> <p> \u0e01\u0e25\u0e49\u0e2d\u0e07 \u0e40\u0e0b\u0e19\u0e40\u0e0b\u0e2d\u0e23\u0e4c\u0e01\u0e25\u0e49\u0e2d\u0e07 OV2640 \u0e1a\u0e19 ESP32-CAM \u0e04\u0e37\u0e2d\u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e08\u0e32\u0e01\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e1e\u0e31\u0e12\u0e19\u0e32 ESP32 \u0e23\u0e38\u0e48\u0e19\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e41\u0e25\u0e30\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e01\u0e15\u0e4c\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e23\u0e34\u0e48\u0e07\u0e1b\u0e23\u0e30\u0e15\u0e39\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e1e\u0e35\u0e48\u0e40\u0e25\u0e35\u0e49\u0e22\u0e07\u0e40\u0e14\u0e47\u0e01</p> <p>\u0e01\u0e25\u0e49\u0e2d\u0e07 OV2640 \u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 2 \u0e40\u0e21\u0e01\u0e30\u0e1e\u0e34\u0e01\u0e40\u0e0b\u0e25 \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e16\u0e36\u0e07 1600\u00d71200 \u0e1e\u0e34\u0e01\u0e40\u0e0b\u0e25 \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e43\u0e19\u0e23\u0e30\u0e1a\u0e1a\u0e40\u0e1d\u0e49\u0e32\u0e23\u0e30\u0e27\u0e31\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48</p> <p></p> <p>\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e01\u0e32\u0e23\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e0a\u0e48\u0e2d\u0e07\u0e40\u0e2a\u0e35\u0e22\u0e1a\u0e01\u0e32\u0e23\u0e4c\u0e14 microSD \u0e1a\u0e19 ESP32-CAM \u0e16\u0e37\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e14\u0e35\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 \u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e02\u0e22\u0e32\u0e22\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e44\u0e21\u0e48\u0e08\u0e33\u0e01\u0e31\u0e14 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e15\u0e31\u0e27\u0e19\u0e35\u0e49\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e22\u0e34\u0e48\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 (data logger) \u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e20\u0e32\u0e1e</p> <p></p> <p>\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28 ESP32-CAM \u0e21\u0e32\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e41\u0e1a\u0e1a PCB \u0e17\u0e35\u0e48\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e1a\u0e19\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e41\u0e25\u0e30\u0e02\u0e31\u0e49\u0e27\u0e15\u0e48\u0e2d u.FL \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49\u0e22\u0e31\u0e07\u0e21\u0e35\u0e08\u0e31\u0e21\u0e40\u0e1b\u0e2d\u0e23\u0e4c\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28 (\u0e15\u0e31\u0e27\u0e15\u0e49\u0e32\u0e19\u0e17\u0e32\u0e19 0 \u0e42\u0e2d\u0e2b\u0e4c\u0e21) \u0e17\u0e35\u0e48\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e04\u0e38\u0e13\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e41\u0e1a\u0e1a\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23</p> <p>\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28 PCB \u0e40\u0e1b\u0e47\u0e19\u0e27\u0e34\u0e18\u0e35\u0e17\u0e35\u0e48\u0e22\u0e2d\u0e14\u0e40\u0e22\u0e35\u0e48\u0e22\u0e21\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 ESP32-CAM \u0e0b\u0e36\u0e48\u0e07\u0e17\u0e33\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e14\u0e35\u0e2b\u0e32\u0e01\u0e04\u0e38\u0e13\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e01\u0e25\u0e49\u0e01\u0e31\u0e1a\u0e40\u0e23\u0e32\u0e40\u0e15\u0e2d\u0e23\u0e4c (AI-Thinker \u0e23\u0e30\u0e1a\u0e38\u0e27\u0e48\u0e32\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28 PCB \u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 2.1dBi)</p> <p>\u0e41\u0e15\u0e48\u0e2b\u0e32\u0e01\u0e04\u0e38\u0e13\u0e2d\u0e22\u0e39\u0e48\u0e2b\u0e48\u0e32\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e40\u0e01\u0e34\u0e19\u0e44\u0e1b \u0e04\u0e38\u0e13\u0e2d\u0e32\u0e08\u0e1e\u0e1a\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e01\u0e32\u0e23\u0e2a\u0e15\u0e23\u0e35\u0e21\u0e27\u0e34\u0e14\u0e35\u0e42\u0e2d\u0e17\u0e35\u0e48\u0e0a\u0e49\u0e32\u0e41\u0e25\u0e30\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e19\u0e35\u0e49 \u0e04\u0e27\u0e23\u0e43\u0e0a\u0e49\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e02\u0e19\u0e32\u0e14 2.4GHz \u0e17\u0e35\u0e48\u0e21\u0e35\u0e02\u0e31\u0e49\u0e27\u0e15\u0e48\u0e2d IPX \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e19\u0e35\u0e49 \u0e04\u0e38\u0e13\u0e15\u0e49\u0e2d\u0e07\u0e1b\u0e23\u0e31\u0e1a\u0e08\u0e31\u0e21\u0e40\u0e1b\u0e2d\u0e23\u0e4c\u0e40\u0e2a\u0e32\u0e2d\u0e32\u0e01\u0e32\u0e28\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e02\u0e31\u0e49\u0e27\u0e15\u0e48\u0e2d u.FL</p> <p></p> <p>Pinout \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a board</p> <p></p> <p>LEDs</p> <p>ESP32-CAM \u0e21\u0e32\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e44\u0e1f LED \u0e2a\u0e35\u0e02\u0e32\u0e27\u0e17\u0e23\u0e07\u0e2a\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e35\u0e48\u0e22\u0e21 \u0e0b\u0e36\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e21\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e41\u0e1f\u0e25\u0e0a\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07 \u0e41\u0e15\u0e48\u0e22\u0e31\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e41\u0e2a\u0e07\u0e2a\u0e27\u0e48\u0e32\u0e07\u0e17\u0e31\u0e48\u0e27\u0e44\u0e1b\u0e44\u0e14\u0e49\u0e40\u0e0a\u0e48\u0e19\u0e01\u0e31\u0e19</p> <p>\u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49 \u0e22\u0e31\u0e07\u0e21\u0e35\u0e44\u0e1f LED \u0e2a\u0e35\u0e41\u0e14\u0e07\u0e02\u0e19\u0e32\u0e14\u0e40\u0e25\u0e47\u0e01\u0e14\u0e49\u0e32\u0e19\u0e2b\u0e25\u0e31\u0e07\u0e17\u0e35\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e1a\u0e48\u0e07\u0e0a\u0e35\u0e49\u0e2a\u0e16\u0e32\u0e19\u0e30 \u0e44\u0e1f\u0e19\u0e35\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e31\u0e49\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e44\u0e14\u0e49\u0e42\u0e14\u0e22\u0e1c\u0e39\u0e49\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e02\u0e32 GPIO33</p> <p></p>"},{"location":"webcam/1set_arduino_ide_webcam/#esp32-cam-mb","title":"\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2d\u0e30\u0e41\u0e14\u0e1b\u0e40\u0e15\u0e2d\u0e23\u0e4c ESP32-CAM-MB (\u0e41\u0e19\u0e30\u0e19\u0e33)","text":"<p>\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 FTDI Adapter \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 ESP32-CAM \u0e2d\u0e32\u0e08\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e22\u0e38\u0e48\u0e07\u0e22\u0e32\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e49\u0e32\u0e07 \u0e14\u0e49\u0e27\u0e22\u0e40\u0e2b\u0e15\u0e38\u0e19\u0e35\u0e49\u0e1c\u0e39\u0e49\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e2b\u0e25\u0e32\u0e22\u0e23\u0e32\u0e22\u0e08\u0e36\u0e07\u0e21\u0e35\u0e01\u0e32\u0e23\u0e02\u0e32\u0e22\u0e1a\u0e2d\u0e23\u0e4c\u0e14 ESP32-CAM \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e1a\u0e41\u0e1c\u0e07\u0e40\u0e2a\u0e23\u0e34\u0e21\u0e02\u0e19\u0e32\u0e14\u0e40\u0e25\u0e47\u0e01\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e27\u0e48\u0e32 ESP32-CAM-MB</p> <p></p> <p>\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34\u0e40\u0e14\u0e48\u0e19\u0e02\u0e2d\u0e07\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e19\u0e35\u0e49</p> <p>\u0e08\u0e38\u0e14\u0e40\u0e14\u0e48\u0e19\u0e02\u0e2d\u0e07\u0e1a\u0e2d\u0e23\u0e4c\u0e14 ESP32-CAM-MB \u0e04\u0e37\u0e2d CH340G USB-to-Serial Converter \u0e0b\u0e36\u0e48\u0e07\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e04\u0e2d\u0e21\u0e1e\u0e34\u0e27\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13\u0e01\u0e31\u0e1a ESP32-CAM</p> <p>\u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49\u0e22\u0e31\u0e07\u0e21\u0e35\u0e1b\u0e38\u0e48\u0e21 RESET, \u0e1b\u0e38\u0e48\u0e21 BOOT, \u0e44\u0e1f LED \u0e41\u0e2a\u0e14\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e30\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e04\u0e27\u0e1a\u0e04\u0e38\u0e21\u0e41\u0e23\u0e07\u0e14\u0e31\u0e19\u0e44\u0e1f\u0e1f\u0e49\u0e32 (Voltage Regulator) \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e08\u0e48\u0e32\u0e22\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e43\u0e2b\u0e49 ESP32-CAM \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d</p>"},{"location":"webcam/1set_arduino_ide_webcam/#board-partition-burn","title":"\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Board \u0e41\u0e25\u0e30 Partition \u0e01\u0e48\u0e2d\u0e19\u0e01\u0e32\u0e23 Burn","text":"<ul> <li>\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Board ESP32 Wrover Module   </li> <li> <p>\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 partition Huge App   </p> </li> <li> <p>\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d pin \u0e02\u0e2d\u0e07 esp32 \u0e41\u0e25\u0e30 \u0e01\u0e25\u0e49\u0e2d\u0e07</p> </li> </ul> ESP32 Pin Camera Pin IO 0 XCLK IO 2 PCLK IO 15 VSYNC IO 13 HREF IO 12 SIOC IO 14 SIOD IO 5 Y2 IO 18 Y3 IO 19 Y4 IO 21 Y5 IO 22 Y6 IO 23 Y7 IO 25 Y8 IO 26 Y9 <p>\u0e2a\u0e23\u0e38\u0e1b spec</p> <p>ESP32-CAM Specifications</p> <p>ESP32-CAM \u0e43\u0e0a\u0e49\u0e42\u0e21\u0e14\u0e39\u0e25 ESP32-S \u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e08\u0e36\u0e07\u0e21\u0e35\u0e2a\u0e40\u0e1b\u0e01\u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 \u0e42\u0e14\u0e22\u0e21\u0e35\u0e04\u0e38\u0e13\u0e2a\u0e21\u0e1a\u0e31\u0e15\u0e34\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49:</p> <ul> <li>802.11b/g/n Wi-Fi</li> <li>Bluetooth 4.2 with BLE</li> <li>UART, SPI, I2C and PWM interfaces</li> <li>Clock speed up to 160 MHz</li> <li>Computing power up to 600 DMIPS</li> <li>520 KB SRAM plus 4 MB PSRAM</li> <li>Supports WiFi Image Upload</li> <li>Multiple Sleep modes</li> <li>Firmware Over the Air (FOTA) upgrades possible</li> <li>9 GPIO ports</li> <li>Built-in Flash LED</li> </ul> esp32-cam-video-web-server.ino<pre><code>#include \"esp_camera.h\"\n#include &lt;WiFi.h&gt;\n#include \"esp_timer.h\"\n#include \"img_converters.h\"\n#include \"Arduino.h\"\n#include \"fb_gfx.h\"\n#include \"soc/soc.h\"          //disable brownout problems\n#include \"soc/rtc_cntl_reg.h\" //disable brownout problems\n#include \"esp_http_server.h\"\n\n// Replace with your network credentials\nconst char *ssid = \"TrueGigatexFiber_uS7_2.4G\";\nconst char *password = \"itbakery@9\";\n\n#define PART_BOUNDARY \"123456789000000000000987654321\"\n\n// This project was tested with the AI Thinker Model, M5STACK PSRAM Model and M5STACK WITHOUT PSRAM\n#define CAMERA_MODEL_AI_THINKER\n// #define CAMERA_MODEL_M5STACK_PSRAM\n// #define CAMERA_MODEL_M5STACK_WITHOUT_PSRAM\n\n// Not tested with this model\n// #define CAMERA_MODEL_WROVER_KIT\n\n#if defined(CAMERA_MODEL_WROVER_KIT)\n#define PWDN_GPIO_NUM -1\n#define RESET_GPIO_NUM -1\n#define XCLK_GPIO_NUM 21\n#define SIOD_GPIO_NUM 26\n#define SIOC_GPIO_NUM 27\n\n#define Y9_GPIO_NUM 35\n#define Y8_GPIO_NUM 34\n#define Y7_GPIO_NUM 39\n#define Y6_GPIO_NUM 36\n#define Y5_GPIO_NUM 19\n#define Y4_GPIO_NUM 18\n#define Y3_GPIO_NUM 5\n#define Y2_GPIO_NUM 4\n#define VSYNC_GPIO_NUM 25\n#define HREF_GPIO_NUM 23\n#define PCLK_GPIO_NUM 22\n\n#elif defined(CAMERA_MODEL_M5STACK_PSRAM)\n#define PWDN_GPIO_NUM -1\n#define RESET_GPIO_NUM 15\n#define XCLK_GPIO_NUM 27\n#define SIOD_GPIO_NUM 25\n#define SIOC_GPIO_NUM 23\n\n#define Y9_GPIO_NUM 19\n#define Y8_GPIO_NUM 36\n#define Y7_GPIO_NUM 18\n#define Y6_GPIO_NUM 39\n#define Y5_GPIO_NUM 5\n#define Y4_GPIO_NUM 34\n#define Y3_GPIO_NUM 35\n#define Y2_GPIO_NUM 32\n#define VSYNC_GPIO_NUM 22\n#define HREF_GPIO_NUM 26\n#define PCLK_GPIO_NUM 21\n\n#elif defined(CAMERA_MODEL_M5STACK_WITHOUT_PSRAM)\n#define PWDN_GPIO_NUM -1\n#define RESET_GPIO_NUM 15\n#define XCLK_GPIO_NUM 27\n#define SIOD_GPIO_NUM 25\n#define SIOC_GPIO_NUM 23\n\n#define Y9_GPIO_NUM 19\n#define Y8_GPIO_NUM 36\n#define Y7_GPIO_NUM 18\n#define Y6_GPIO_NUM 39\n#define Y5_GPIO_NUM 5\n#define Y4_GPIO_NUM 34\n#define Y3_GPIO_NUM 35\n#define Y2_GPIO_NUM 17\n#define VSYNC_GPIO_NUM 22\n#define HREF_GPIO_NUM 26\n#define PCLK_GPIO_NUM 21\n\n#elif defined(CAMERA_MODEL_AI_THINKER)\n#define PWDN_GPIO_NUM 32\n#define RESET_GPIO_NUM -1\n#define XCLK_GPIO_NUM 0\n#define SIOD_GPIO_NUM 26\n#define SIOC_GPIO_NUM 27\n\n#define Y9_GPIO_NUM 35\n#define Y8_GPIO_NUM 34\n#define Y7_GPIO_NUM 39\n#define Y6_GPIO_NUM 36\n#define Y5_GPIO_NUM 21\n#define Y4_GPIO_NUM 19\n#define Y3_GPIO_NUM 18\n#define Y2_GPIO_NUM 5\n#define VSYNC_GPIO_NUM 25\n#define HREF_GPIO_NUM 23\n#define PCLK_GPIO_NUM 22\n#else\n#error \"Camera model not selected\"\n#endif\n\nstatic const char *_STREAM_CONTENT_TYPE = \"multipart/x-mixed-replace;boundary=\" PART_BOUNDARY;\nstatic const char *_STREAM_BOUNDARY = \"\\r\\n--\" PART_BOUNDARY \"\\r\\n\";\nstatic const char *_STREAM_PART = \"Content-Type: image/jpeg\\r\\nContent-Length: %u\\r\\n\\r\\n\";\n\nhttpd_handle_t stream_httpd = NULL;\n\nstatic esp_err_t stream_handler(httpd_req_t *req)\n{\n  camera_fb_t *fb = NULL;\n  esp_err_t res = ESP_OK;\n  size_t _jpg_buf_len = 0;\n  uint8_t *_jpg_buf = NULL;\n  char *part_buf[64];\n\n  res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);\n  if (res != ESP_OK)\n  {\n    return res;\n  }\n\n  while (true)\n  {\n    fb = esp_camera_fb_get();\n    if (!fb)\n    {\n      Serial.println(\"Camera capture failed\");\n      res = ESP_FAIL;\n    }\n    else\n    {\n      if (fb-&gt;width &gt; 400)\n      {\n        if (fb-&gt;format != PIXFORMAT_JPEG)\n        {\n          bool jpeg_converted = frame2jpg(fb, 80, &amp;_jpg_buf, &amp;_jpg_buf_len);\n          esp_camera_fb_return(fb);\n          fb = NULL;\n          if (!jpeg_converted)\n          {\n            Serial.println(\"JPEG compression failed\");\n            res = ESP_FAIL;\n          }\n        }\n        else\n        {\n          _jpg_buf_len = fb-&gt;len;\n          _jpg_buf = fb-&gt;buf;\n        }\n      }\n    }\n    if (res == ESP_OK)\n    {\n      size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);\n      res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);\n    }\n    if (res == ESP_OK)\n    {\n      res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);\n    }\n    if (res == ESP_OK)\n    {\n      res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));\n    }\n    if (fb)\n    {\n      esp_camera_fb_return(fb);\n      fb = NULL;\n      _jpg_buf = NULL;\n    }\n    else if (_jpg_buf)\n    {\n      free(_jpg_buf);\n      _jpg_buf = NULL;\n    }\n    if (res != ESP_OK)\n    {\n      break;\n    }\n    // Serial.printf(\"MJPG: %uB\\n\",(uint32_t)(_jpg_buf_len));\n  }\n  return res;\n}\n\nvoid startCameraServer()\n{\n  httpd_config_t config = HTTPD_DEFAULT_CONFIG();\n  config.server_port = 80;\n\n  httpd_uri_t index_uri = {\n      .uri = \"/\",\n      .method = HTTP_GET,\n      .handler = stream_handler,\n      .user_ctx = NULL};\n\n  // Serial.printf(\"Starting web server on port: '%d'\\n\", config.server_port);\n  if (httpd_start(&amp;stream_httpd, &amp;config) == ESP_OK)\n  {\n    httpd_register_uri_handler(stream_httpd, &amp;index_uri);\n  }\n}\n\nvoid setup()\n{\n  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); // disable brownout detector\n\n  Serial.begin(115200);\n  Serial.setDebugOutput(false);\n\n  camera_config_t config;\n  config.ledc_channel = LEDC_CHANNEL_0;\n  config.ledc_timer = LEDC_TIMER_0;\n  config.pin_d0 = Y2_GPIO_NUM;\n  config.pin_d1 = Y3_GPIO_NUM;\n  config.pin_d2 = Y4_GPIO_NUM;\n  config.pin_d3 = Y5_GPIO_NUM;\n  config.pin_d4 = Y6_GPIO_NUM;\n  config.pin_d5 = Y7_GPIO_NUM;\n  config.pin_d6 = Y8_GPIO_NUM;\n  config.pin_d7 = Y9_GPIO_NUM;\n  config.pin_xclk = XCLK_GPIO_NUM;\n  config.pin_pclk = PCLK_GPIO_NUM;\n  config.pin_vsync = VSYNC_GPIO_NUM;\n  config.pin_href = HREF_GPIO_NUM;\n  config.pin_sccb_sda = SIOD_GPIO_NUM;\n  config.pin_sccb_scl = SIOC_GPIO_NUM;\n  config.pin_pwdn = PWDN_GPIO_NUM;\n  config.pin_reset = RESET_GPIO_NUM;\n  config.xclk_freq_hz = 20000000;\n  config.pixel_format = PIXFORMAT_JPEG;\n\n  if (psramFound())\n  {\n    config.frame_size = FRAMESIZE_UXGA;\n    config.jpeg_quality = 10;\n    config.fb_count = 2;\n  }\n  else\n  {\n    config.frame_size = FRAMESIZE_SVGA;\n    config.jpeg_quality = 12;\n    config.fb_count = 1;\n  }\n\n  // Camera init\n  esp_err_t err = esp_camera_init(&amp;config);\n  if (err != ESP_OK)\n  {\n    Serial.printf(\"Camera init failed with error 0x%x\", err);\n    return;\n  }\n  // Wi-Fi connection\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED)\n  {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.println(\"WiFi connected\");\n\n  Serial.print(\"Camera Stream Ready! Go to: http://\");\n  Serial.print(WiFi.localIP());\n\n  // Start streaming web server\n  startCameraServer();\n}\n\nvoid loop()\n{\n  delay(1);\n}\n</code></pre> <ul> <li>Outpot Esp \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a access point \u0e41\u0e25\u0e30\u0e44\u0e14\u0e49 ip \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e34\u0e14 browser \u0e44\u0e1b\u0e22\u0e31\u0e07 ip \u0e17\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07 \u0e43\u0e19 console   </li> </ul>"},{"location":"webcam/2example_esp32_camera/","title":"2 ESP 32 CameraWebServer (Stream)","text":""},{"location":"webcam/2example_esp32_camera/#driver-ch340c-usb-to-serial-chip","title":"\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 Driver CH340C USB to serial chip","text":"<p>https://www.arduined.eu/files/windows10/CH341SER.zip</p> <p></p>"},{"location":"webcam/2example_esp32_camera/#select-code-from-example","title":"Select Code from example","text":"<p>Upload code:</p> <p></p>"},{"location":"webcam/2example_esp32_camera/#ai-thinker-esp32-cam","title":"\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e25\u0e37\u0e2d\u0e01 Ai Thinker ESP32-CAM","text":"<ul> <li>\u0e1c\u0e25\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 code esp32-workshop-1.ino</li> </ul> <pre><code>ESP32 Chip model = ESP32-D0WD-V3 Rev 3\nThis chip has 2 cores\nChip ID: 11179668\nESP32 Information:\nChip Model: ESP32-D0WD-V3\nChip Revision: 3\nChip ID: 11179668\nFlash Size: 4 MB\nPSRAM Size: 3 MB\nFree RAM: 0 MB\n</code></pre>"},{"location":"webcam/2example_esp32_camera/#_1","title":"\u0e17\u0e14\u0e2a\u0e2d\u0e1a","text":"cameraWebServer.ino<pre><code>#include \"esp_camera.h\"\n#include &lt;WiFi.h&gt;\n\n//\n// WARNING!!! PSRAM IC required for UXGA resolution and high JPEG quality\n//            Ensure ESP32 Wrover Module or other board with PSRAM is selected\n//            Partial images will be transmitted if image exceeds buffer size\n//\n//            You must select partition scheme from the board menu that has at least 3MB APP space.\n//            Face Recognition is DISABLED for ESP32 and ESP32-S2, because it takes up from 15\n//            seconds to process single frame. Face Detection is ENABLED if PSRAM is enabled as well\n\n// ===================\n// Select camera model\n// ===================\n//#define CAMERA_MODEL_WROVER_KIT // Has PSRAM\n//#define CAMERA_MODEL_ESP_EYE  // Has PSRAM\n//#define CAMERA_MODEL_ESP32S3_EYE // Has PSRAM\n//#define CAMERA_MODEL_M5STACK_PSRAM // Has PSRAM\n//#define CAMERA_MODEL_M5STACK_V2_PSRAM // M5Camera version B Has PSRAM\n//#define CAMERA_MODEL_M5STACK_WIDE // Has PSRAM\n//#define CAMERA_MODEL_M5STACK_ESP32CAM // No PSRAM\n//#define CAMERA_MODEL_M5STACK_UNITCAM // No PSRAM\n//#define CAMERA_MODEL_M5STACK_CAMS3_UNIT  // Has PSRAM\n#define CAMERA_MODEL_AI_THINKER // Has PSRAM\n//#define CAMERA_MODEL_TTGO_T_JOURNAL // No PSRAM\n//#define CAMERA_MODEL_XIAO_ESP32S3 // Has PSRAM\n// ** Espressif Internal Boards **\n//#define CAMERA_MODEL_ESP32_CAM_BOARD\n//#define CAMERA_MODEL_ESP32S2_CAM_BOARD\n//#define CAMERA_MODEL_ESP32S3_CAM_LCD\n//#define CAMERA_MODEL_DFRobot_FireBeetle2_ESP32S3 // Has PSRAM\n//#define CAMERA_MODEL_DFRobot_Romeo_ESP32S3 // Has PSRAM\n#include \"camera_pins.h\"\n\n// ===========================\n// Enter your WiFi credentials\n// ===========================\nconst char *ssid = \"TrueGigatexFiber_uS7_2.4G\";\nconst char *password = \"itbakery@9\";\n\nvoid startCameraServer();\nvoid setupLedFlash(int pin);\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.setDebugOutput(true);\n  Serial.println();\n\n  camera_config_t config;\n  config.ledc_channel = LEDC_CHANNEL_0;\n  config.ledc_timer = LEDC_TIMER_0;\n  config.pin_d0 = Y2_GPIO_NUM;\n  config.pin_d1 = Y3_GPIO_NUM;\n  config.pin_d2 = Y4_GPIO_NUM;\n  config.pin_d3 = Y5_GPIO_NUM;\n  config.pin_d4 = Y6_GPIO_NUM;\n  config.pin_d5 = Y7_GPIO_NUM;\n  config.pin_d6 = Y8_GPIO_NUM;\n  config.pin_d7 = Y9_GPIO_NUM;\n  config.pin_xclk = XCLK_GPIO_NUM;\n  config.pin_pclk = PCLK_GPIO_NUM;\n  config.pin_vsync = VSYNC_GPIO_NUM;\n  config.pin_href = HREF_GPIO_NUM;\n  config.pin_sccb_sda = SIOD_GPIO_NUM;\n  config.pin_sccb_scl = SIOC_GPIO_NUM;\n  config.pin_pwdn = PWDN_GPIO_NUM;\n  config.pin_reset = RESET_GPIO_NUM;\n  config.xclk_freq_hz = 20000000;\n  config.frame_size = FRAMESIZE_UXGA;\n  config.pixel_format = PIXFORMAT_JPEG;  // for streaming\n  //config.pixel_format = PIXFORMAT_RGB565; // for face detection/recognition\n  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;\n  config.fb_location = CAMERA_FB_IN_PSRAM;\n  config.jpeg_quality = 12;\n  config.fb_count = 1;\n\n  // if PSRAM IC present, init with UXGA resolution and higher JPEG quality\n  //                      for larger pre-allocated frame buffer.\n  if (config.pixel_format == PIXFORMAT_JPEG) {\n    if (psramFound()) {\n      config.jpeg_quality = 10;\n      config.fb_count = 2;\n      config.grab_mode = CAMERA_GRAB_LATEST;\n    } else {\n      // Limit the frame size when PSRAM is not available\n      config.frame_size = FRAMESIZE_SVGA;\n      config.fb_location = CAMERA_FB_IN_DRAM;\n    }\n  } else {\n    // Best option for face detection/recognition\n    config.frame_size = FRAMESIZE_240X240;\n#if CONFIG_IDF_TARGET_ESP32S3\n    config.fb_count = 2;\n#endif\n  }\n\n#if defined(CAMERA_MODEL_ESP_EYE)\n  pinMode(13, INPUT_PULLUP);\n  pinMode(14, INPUT_PULLUP);\n#endif\n\n  // camera init\n  esp_err_t err = esp_camera_init(&amp;config);\n  if (err != ESP_OK) {\n    Serial.printf(\"Camera init failed with error 0x%x\", err);\n    return;\n  }\n\n  sensor_t *s = esp_camera_sensor_get();\n  // initial sensors are flipped vertically and colors are a bit saturated\n  if (s-&gt;id.PID == OV3660_PID) {\n    s-&gt;set_vflip(s, 1);        // flip it back\n    s-&gt;set_brightness(s, 1);   // up the brightness just a bit\n    s-&gt;set_saturation(s, -2);  // lower the saturation\n  }\n  // drop down frame size for higher initial frame rate\n  if (config.pixel_format == PIXFORMAT_JPEG) {\n    s-&gt;set_framesize(s, FRAMESIZE_QVGA);\n  }\n\n#if defined(CAMERA_MODEL_M5STACK_WIDE) || defined(CAMERA_MODEL_M5STACK_ESP32CAM)\n  s-&gt;set_vflip(s, 1);\n  s-&gt;set_hmirror(s, 1);\n#endif\n\n#if defined(CAMERA_MODEL_ESP32S3_EYE)\n  s-&gt;set_vflip(s, 1);\n#endif\n\n// Setup LED FLash if LED pin is defined in camera_pins.h\n#if defined(LED_GPIO_NUM)\n  setupLedFlash(LED_GPIO_NUM);\n#endif\n\n  WiFi.begin(ssid, password);\n  WiFi.setSleep(false);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.println(\"WiFi connected\");\n\n  startCameraServer();\n\n  Serial.print(\"Camera Ready! Use 'http://\");\n  Serial.print(WiFi.localIP());\n  Serial.println(\"' to connect\");\n}\n\nvoid loop() {\n  // Do nothing. Everything is done in another task by the web server\n  delay(10000);\n}\n</code></pre> <p>\u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e42\u0e04\u0e49\u0e14</p> <ol> <li>\u0e01\u0e33\u0e25\u0e31\u0e07\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19</li> </ol> <pre><code>#include \"esp_camera.h\"\n#include &lt;WiFi.h&gt;\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25\u0e01\u0e25\u0e49\u0e2d\u0e07:    \u0e43\u0e2b\u0e49\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e17\u0e35\u0e48\u0e04\u0e38\u0e13\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e41\u0e25\u0e30\u0e22\u0e01\u0e40\u0e25\u0e34\u0e01\u0e01\u0e32\u0e23\u0e04\u0e2d\u0e21\u0e40\u0e21\u0e19\u0e15\u0e4c \u0e42\u0e21\u0e40\u0e14\u0e25\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e17\u0e35\u0e48\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e43\u0e19\u0e42\u0e21\u0e14\u0e39\u0e25 ESP32-CAM \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e04\u0e37\u0e2d\u0e23\u0e38\u0e48\u0e19 AI_THINKER</li> </ol> <pre><code>#define CAMERA_MODEL_AI_THINKER // Has PSRAM\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35 \u201ccamera_pins.h\u201d:    \u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e19\u0e35\u0e49\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e1e\u0e34\u0e19\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a ESP32.</li> </ol> <pre><code>#include \"camera_pins.h\"\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13:    \u0e43\u0e2a\u0e48\u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 (SSID) \u0e41\u0e25\u0e30\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e17\u0e35\u0e48\u0e04\u0e38\u0e13\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d.</li> </ol> <pre><code>const char* ssid = \"**************\";\nconst char* password = \"**************\";\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c \u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a \u0e41\u0e25\u0e30\u0e44\u0e1f\u0e41\u0e1f\u0e25\u0e0a\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07:    \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c \u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e04\u0e27\u0e1a\u0e04\u0e38\u0e21\u0e44\u0e1f\u0e41\u0e1f\u0e25\u0e0a\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07.</li> </ol> <pre><code>void startCameraServer();\nvoid setupLedFlash(int pin);\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e41\u0e1a\u0e1a\u0e2d\u0e19\u0e38\u0e01\u0e23\u0e21\u0e41\u0e25\u0e30\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e14\u0e35\u0e1a\u0e31\u0e01:    \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e1c\u0e48\u0e32\u0e19\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e2d\u0e19\u0e38\u0e01\u0e23\u0e21 (Serial) \u0e41\u0e25\u0e30\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e14\u0e35\u0e1a\u0e31\u0e01\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e0a\u0e48\u0e27\u0e22\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21.</li> </ol> <pre><code>Serial.begin(115200);\nSerial.setDebugOutput(true)\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e1e\u0e34\u0e19\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07 \u0e1a\u0e19 ESP32 \u0e15\u0e32\u0e21\u0e44\u0e1f\u0e25\u0e4c \u201ccamera_pins.h\u201d:    \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e1e\u0e34\u0e19\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e41\u0e25\u0e30 ESP32 \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e44\u0e27\u0e49\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c \u201ccamera_pins.h\u201d.</li> </ol> <pre><code>camera_config_t config;\n  config.ledc_channel = LEDC_CHANNEL_0;\n  config.ledc_timer = LEDC_TIMER_0;\n  config.pin_d0 = Y2_GPIO_NUM;\n  config.pin_d1 = Y3_GPIO_NUM;\n  config.pin_d2 = Y4_GPIO_NUM;\n  config.pin_d3 = Y5_GPIO_NUM;\n  config.pin_d4 = Y6_GPIO_NUM;\n  config.pin_d5 = Y7_GPIO_NUM;\n  config.pin_d6 = Y8_GPIO_NUM;\n  config.pin_d7 = Y9_GPIO_NUM;\n  config.pin_xclk = XCLK_GPIO_NUM;\n  config.pin_pclk = PCLK_GPIO_NUM;\n  config.pin_vsync = VSYNC_GPIO_NUM;\n  config.pin_href = HREF_GPIO_NUM;\n  config.pin_sscb_sda = SIOD_GPIO_NUM;\n  config.pin_sscb_scl = SIOC_GPIO_NUM;\n  config.pin_pwdn = PWDN_GPIO_NUM;\n  config.pin_reset = RESET_GPIO_NUM;\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e41\u0e25\u0e30\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07\u0e20\u0e32\u0e1e:    \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e41\u0e25\u0e30\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07\u0e20\u0e32\u0e1e \u0e40\u0e0a\u0e48\u0e19 \u0e04\u0e27\u0e32\u0e21\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 \u0e04\u0e27\u0e32\u0e21\u0e04\u0e21\u0e0a\u0e31\u0e14 \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e07\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21\u0e01\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19.</li> </ol> <pre><code>  config.xclk_freq_hz = 20000000;\n  config.frame_size = FRAMESIZE_UXGA;\n  config.pixel_format = PIXFORMAT_JPEG; // for streaming\n  //config.pixel_format = PIXFORMAT_RGB565; // for face detection/recognition\n  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;\n  config.fb_location = CAMERA_FB_IN_PSRAM;\n  config.jpeg_quality = 12;\n  config.fb_count = 1;\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e25\u0e49\u0e2d\u0e07:    \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e41\u0e25\u0e30\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07 \u0e42\u0e14\u0e22\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e1e\u0e34\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19.</li> </ol> <pre><code>  esp_err_t err = esp_camera_init(&amp;config);\n  if (err != ESP_OK) {\n    Serial.printf(\"Camera init failed with error 0x%x\", err);\n    return;\n  }\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Wi-Fi:     \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d (SSID) \u0e41\u0e25\u0e30\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e44\u0e27\u0e49 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 ESP32 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19.</li> </ol> <pre><code>  WiFi.begin(ssid, password);\n  WiFi.setSleep(false);\n</code></pre> <ol> <li>\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c:     \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e1a\u0e19 ESP32 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e02\u0e2d\u0e08\u0e32\u0e01\u0e40\u0e27\u0e47\u0e1a\u0e40\u0e1a\u0e23\u0e32\u0e27\u0e4c\u0e40\u0e0b\u0e2d\u0e23\u0e4c\u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e1c\u0e48\u0e32\u0e19\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Wi-Fi \u0e42\u0e14\u0e22\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e08\u0e30\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e2b\u0e23\u0e37\u0e2d\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e15\u0e48\u0e32\u0e07 \u0e46 \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23.</li> </ol> <pre><code>startCameraServer();\n</code></pre> <ol> <li>\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22, \u0e2b\u0e32\u0e01\u0e17\u0e38\u0e01\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e33\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e14\u0e35:     \u0e40\u0e23\u0e32\u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48 IP \u0e02\u0e2d\u0e07\u0e42\u0e21\u0e14\u0e39\u0e25 ESP32CAM \u0e1a\u0e19\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e2d\u0e19\u0e38\u0e01\u0e23\u0e21 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e1c\u0e48\u0e32\u0e19\u0e40\u0e27\u0e47\u0e1a\u0e40\u0e1a\u0e23\u0e32\u0e27\u0e4c\u0e40\u0e0b\u0e2d\u0e23\u0e4c\u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19.</li> </ol> <pre><code>  Serial.print(\"Camera Ready! Use 'http://\");\n  Serial.print(WiFi.localIP());\n  Serial.println(\"' to connect\");\n</code></pre>"},{"location":"webcam/2example_esp32_camera/#esp32cam","title":"\u0e01\u0e32\u0e23\u0e08\u0e14\u0e08\u0e33\u0e43\u0e1a\u0e2b\u0e19\u0e49\u0e32\u0e14\u0e49\u0e27\u0e22 ESP32CAM","text":"<p>\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e32\u0e23\u0e08\u0e14\u0e08\u0e33\u0e43\u0e1a\u0e2b\u0e19\u0e49\u0e32 \u0e43\u0e2b\u0e49\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e20\u0e32\u0e1e\u0e40\u0e1b\u0e47\u0e19 QVGA (320x240 \u0e1e\u0e34\u0e01\u0e40\u0e0b\u0e25) \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e40\u0e1b\u0e34\u0e14\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e37\u0e2d\u0e01 \u201cFace Detection\u201d \u0e41\u0e25\u0e30 \u201cFace Recognition\u201d \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e01\u0e25\u0e49\u0e2d\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e23\u0e27\u0e08\u0e08\u0e31\u0e1a\u0e41\u0e25\u0e30\u0e08\u0e14\u0e08\u0e33\u0e43\u0e1a\u0e2b\u0e19\u0e49\u0e32\u0e44\u0e14\u0e49.</p> <p></p>"},{"location":"webcam/3espcam_sdcard/","title":"3 Save image to SD Card","text":"esp32-cam-sdcard-1.ino<pre><code>#include \"esp_camera.h\"\n#include \"Arduino.h\"\n#include \"FS.h\"                // SD Card ESP32\n#include \"SD_MMC.h\"            // SD Card ESP32\n#include \"soc/soc.h\"           // Disable brownour problems\n#include \"soc/rtc_cntl_reg.h\"  // Disable brownour problems\n#include \"driver/rtc_io.h\"\n#include &lt;EEPROM.h&gt;            // read and write from flash memory\n\n// define the number of bytes you want to access\n#define EEPROM_SIZE 1\n\n// Pin definition for CAMERA_MODEL_AI_THINKER\n#define PWDN_GPIO_NUM     32\n#define RESET_GPIO_NUM    -1\n#define XCLK_GPIO_NUM      0\n#define SIOD_GPIO_NUM     26\n#define SIOC_GPIO_NUM     27\n\n#define Y9_GPIO_NUM       35\n#define Y8_GPIO_NUM       34\n#define Y7_GPIO_NUM       39\n#define Y6_GPIO_NUM       36\n#define Y5_GPIO_NUM       21\n#define Y4_GPIO_NUM       19\n#define Y3_GPIO_NUM       18\n#define Y2_GPIO_NUM        5\n#define VSYNC_GPIO_NUM    25\n#define HREF_GPIO_NUM     23\n#define PCLK_GPIO_NUM     22\n\nint pictureNumber = 0;\n\nvoid setup() {\n  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); //disable brownout detector\n\n  Serial.begin(115200);\n  //Serial.setDebugOutput(true);\n  //Serial.println();\n\n  camera_config_t config;\n  config.ledc_channel = LEDC_CHANNEL_0;\n  config.ledc_timer = LEDC_TIMER_0;\n  config.pin_d0 = Y2_GPIO_NUM;\n  config.pin_d1 = Y3_GPIO_NUM;\n  config.pin_d2 = Y4_GPIO_NUM;\n  config.pin_d3 = Y5_GPIO_NUM;\n  config.pin_d4 = Y6_GPIO_NUM;\n  config.pin_d5 = Y7_GPIO_NUM;\n  config.pin_d6 = Y8_GPIO_NUM;\n  config.pin_d7 = Y9_GPIO_NUM;\n  config.pin_xclk = XCLK_GPIO_NUM;\n  config.pin_pclk = PCLK_GPIO_NUM;\n  config.pin_vsync = VSYNC_GPIO_NUM;\n  config.pin_href = HREF_GPIO_NUM;\n  config.pin_sscb_sda = SIOD_GPIO_NUM;\n  config.pin_sscb_scl = SIOC_GPIO_NUM;\n  config.pin_pwdn = PWDN_GPIO_NUM;\n  config.pin_reset = RESET_GPIO_NUM;\n  config.xclk_freq_hz = 20000000;\n  config.pixel_format = PIXFORMAT_JPEG;\n\n  if(psramFound()){\n    config.frame_size = FRAMESIZE_UXGA; // FRAMESIZE_ + QVGA|CIF|VGA|SVGA|XGA|SXGA|UXGA\n    config.jpeg_quality = 10;\n    config.fb_count = 2;\n  } else {\n    config.frame_size = FRAMESIZE_SVGA;\n    config.jpeg_quality = 12;\n    config.fb_count = 1;\n  }\n\n  // Init Camera\n  esp_err_t err = esp_camera_init(&amp;config);\n  if (err != ESP_OK) {\n    Serial.printf(\"Camera init failed with error 0x%x\", err);\n    return;\n  }\n\n  //Serial.println(\"Starting SD Card\");\n  if(!SD_MMC.begin()){\n    Serial.println(\"SD Card Mount Failed\");\n    return;\n  }\n\n  uint8_t cardType = SD_MMC.cardType();\n  if(cardType == CARD_NONE){\n    Serial.println(\"No SD Card attached\");\n    return;\n  }\n\n  camera_fb_t * fb = NULL;\n\n  // Take Picture with Camera\n  fb = esp_camera_fb_get();\n  delay(1000);//This is key to avoid an issue with the image being very dark and green. If needed adjust total delay time.\n  fb = esp_camera_fb_get();\n\n\n  if(!fb) {\n    Serial.println(\"Camera capture failed\");\n    return;\n  }\n  // initialize EEPROM with predefined size\n  EEPROM.begin(EEPROM_SIZE);\n  pictureNumber = EEPROM.read(0) + 1;\n\n  // Path where new picture will be saved in SD Card\n  String path = \"/picture\" + String(pictureNumber) +\".jpg\";\n\n  fs::FS &amp;fs = SD_MMC;\n  Serial.printf(\"Picture file name: %s\\n\", path.c_str());\n\n  File file = fs.open(path.c_str(), FILE_WRITE);\n  if(!file){\n    Serial.println(\"Failed to open file in writing mode\");\n  }\n  else {\n    file.write(fb-&gt;buf, fb-&gt;len); // payload (image), payload length\n    Serial.printf(\"Saved file to path: %s\\n\", path.c_str());\n    EEPROM.write(0, pictureNumber);\n    EEPROM.commit();\n  }\n  file.close();\n  esp_camera_fb_return(fb);\n\n  // Turns off the ESP32-CAM white on-board LED (flash) connected to GPIO 4\n  pinMode(4, OUTPUT);\n  digitalWrite(4, LOW);\n  rtc_gpio_hold_en(GPIO_NUM_4);\n  esp_deep_sleep_start();\n}\n\nvoid loop() {\n\n}\n</code></pre> <p>\u0e40\u0e1b\u0e34\u0e14 SD Card \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e20\u0e32\u0e1e</p> <p></p>"},{"location":"webcam/3espcam_sdcard/#save-image-with-time","title":"\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u0e01\u0e32\u0e23\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e20\u0e32\u0e1e\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e40\u0e27\u0e25\u0e32 Save image with time","text":"esp32-cam-sdcard-2-with-time.ino<pre><code>#include \"esp_camera.h\"\n#include \"FS.h\"                // SD Card ESP32\n#include \"SD_MMC.h\"            // SD Card ESP32\n#include \"soc/soc.h\"           // Disable brownout problems\n#include \"soc/rtc_cntl_reg.h\"  // Disable brownout problems\n#include \"driver/rtc_io.h\"\n#include &lt;WiFi.h&gt;\n#include \"time.h\"\n\n\n// REPLACE WITH YOUR NETWORK CREDENTIALS\nconst char* ssid = \"TrueGigatexFiber_uS7_2.4G\";\nconst char* password = \"itbakery@9\";\n\n\n// REPLACE WITH YOUR TIMEZONE STRING: https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv\nString myTimezone =\"&lt;+07&gt;-7\";\n\n\n// Pin definition for CAMERA_MODEL_AI_THINKER\n// Change pin definition if you're using another ESP32 camera module\n#define PWDN_GPIO_NUM     32\n#define RESET_GPIO_NUM    -1\n#define XCLK_GPIO_NUM      0\n#define SIOD_GPIO_NUM     26\n#define SIOC_GPIO_NUM     27\n#define Y9_GPIO_NUM       35\n#define Y8_GPIO_NUM       34\n#define Y7_GPIO_NUM       39\n#define Y6_GPIO_NUM       36\n#define Y5_GPIO_NUM       21\n#define Y4_GPIO_NUM       19\n#define Y3_GPIO_NUM       18\n#define Y2_GPIO_NUM        5\n#define VSYNC_GPIO_NUM    25\n#define HREF_GPIO_NUM     23\n#define PCLK_GPIO_NUM     22\n\n\n// Stores the camera configuration parameters\ncamera_config_t config;\n\n\n// Initializes the camera\nvoid configInitCamera(){\n  config.ledc_channel = LEDC_CHANNEL_0;\n  config.ledc_timer = LEDC_TIMER_0;\n  config.pin_d0 = Y2_GPIO_NUM;\n  config.pin_d1 = Y3_GPIO_NUM;\n  config.pin_d2 = Y4_GPIO_NUM;\n  config.pin_d3 = Y5_GPIO_NUM;\n  config.pin_d4 = Y6_GPIO_NUM;\n  config.pin_d5 = Y7_GPIO_NUM;\n  config.pin_d6 = Y8_GPIO_NUM;\n  config.pin_d7 = Y9_GPIO_NUM;\n  config.pin_xclk = XCLK_GPIO_NUM;\n  config.pin_pclk = PCLK_GPIO_NUM;\n  config.pin_vsync = VSYNC_GPIO_NUM;\n  config.pin_href = HREF_GPIO_NUM;\n  config.pin_sscb_sda = SIOD_GPIO_NUM;\n  config.pin_sscb_scl = SIOC_GPIO_NUM;\n  config.pin_pwdn = PWDN_GPIO_NUM;\n  config.pin_reset = RESET_GPIO_NUM;\n  config.xclk_freq_hz = 20000000;\n  config.pixel_format = PIXFORMAT_JPEG; //YUV422,GRAYSCALE,RGB565,JPEG\n  config.grab_mode = CAMERA_GRAB_LATEST;\n\n\n  // Select lower framesize if the camera doesn't support PSRAM\n  if(psramFound()){\n    config.frame_size = FRAMESIZE_UXGA; // FRAMESIZE_ + QVGA|CIF|VGA|SVGA|XGA|SXGA|UXGA\n    config.jpeg_quality = 10; //0-63 lower number means higher quality\n    config.fb_count = 1;\n  } else {\n    config.frame_size = FRAMESIZE_SVGA;\n    config.jpeg_quality = 12;\n    config.fb_count = 1;\n  }\n\n  // Initialize the Camera\n  esp_err_t err = esp_camera_init(&amp;config);\n  if (err != ESP_OK) {\n    Serial.printf(\"Camera init failed with error 0x%x\", err);\n    return;\n  }\n}\n\n\n// Connect to wifi\nvoid  initWiFi(){\n  WiFi.begin(ssid, password);\n  Serial.println(\"Connecting Wifi\");\n  while (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\".\");\n    delay(500);\n  }\n}\n\n\n// Function to set timezone\nvoid setTimezone(String timezone){\n  Serial.printf(\"  Setting Timezone to %s\\n\",timezone.c_str());\n  setenv(\"TZ\",timezone.c_str(),1);  //  Now adjust the TZ.  Clock settings are adjusted to show the new local time\n  tzset();\n}\n\n\n// Connect to NTP server and adjust timezone\nvoid initTime(String timezone){\n  struct tm timeinfo;\n  Serial.println(\"Setting up time\");\n  configTime(0, 0, \"pool.ntp.org\");    // First connect to NTP server, with 0 TZ offset\n  if(!getLocalTime(&amp;timeinfo)){\n    Serial.println(\" Failed to obtain time\");\n    return;\n  }\n  Serial.println(\"Got the time from NTP\");\n  // Now we can set the real timezone\n  setTimezone(timezone);\n}\n\n\n// Get the picture filename based on the current ime\nString getPictureFilename(){\n  struct tm timeinfo;\n  if(!getLocalTime(&amp;timeinfo)){\n    Serial.println(\"Failed to obtain time\");\n    return \"\";\n  }\n  char timeString[20];\n  strftime(timeString, sizeof(timeString), \"%Y-%m-%d_%H-%M-%S\", &amp;timeinfo);\n  Serial.println(timeString);\n  String filename = \"/picture_\" + String(timeString) +\".jpg\";\n  return filename;\n}\n\n\n// Initialize the micro SD card\nvoid initMicroSDCard(){\n  // Start Micro SD card\n  Serial.println(\"Starting SD Card\");\n  if(!SD_MMC.begin()){\n    Serial.println(\"SD Card Mount Failed\");\n    return;\n  }\n  uint8_t cardType = SD_MMC.cardType();\n  if(cardType == CARD_NONE){\n    Serial.println(\"No SD Card attached\");\n    return;\n  }\n}\n\n\n// Take photo and save to microSD card\nvoid takeSavePhoto(){\n  // Take Picture with Camera\n  camera_fb_t * fb = esp_camera_fb_get();\n\n  //Uncomment the following lines if you're getting old pictures\n  //esp_camera_fb_return(fb); // dispose the buffered image\n  //fb = NULL; // reset to capture errors\n  //fb = esp_camera_fb_get();\n\n  if(!fb) {\n    Serial.println(\"Camera capture failed\");\n    delay(1000);\n    ESP.restart();\n  }\n\n\n  // Path where new picture will be saved in SD Card\n  String path = getPictureFilename();\n  Serial.printf(\"Picture file name: %s\\n\", path.c_str());\n\n  // Save picture to microSD card\n  fs::FS &amp;fs = SD_MMC;\n  File file = fs.open(path.c_str(),FILE_WRITE);\n  if(!file){\n    Serial.printf(\"Failed to open file in writing mode\");\n  }\n  else {\n    file.write(fb-&gt;buf, fb-&gt;len); // payload (image), payload length\n    Serial.printf(\"Saved: %s\\n\", path.c_str());\n  }\n  file.close();\n  esp_camera_fb_return(fb);\n}\n\n\nvoid setup() {\n  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); // disable brownout detector\n\n\n  Serial.begin(115200);\n  delay(2000);\n\n\n  // Initialize Wi-Fi\n  initWiFi();\n  // Initialize time with timezone\n  initTime(myTimezone);\n  // Initialize the camera\n  Serial.print(\"Initializing the camera module...\");\n  configInitCamera();\n  Serial.println(\"Ok!\");\n  // Initialize MicroSD\n  Serial.print(\"Initializing the MicroSD card module... \");\n  initMicroSDCard();\n}\n\n\nvoid loop() {\n  // Take and Save Photo\n  takeSavePhoto();\n  delay(10000);\n}\n</code></pre>"},{"location":"webcam/5tensorflowLite_basic1/","title":"5 TensorFlowlite Esp32","text":"<p>\u0e2d\u0e49\u0e32\u0e07\u0e2d\u0e34\u0e07 \u0e17\u0e33\u0e15\u0e32\u0e21 https://colab.research.google.com/drive/1r0cgJ6ZK0vL811bKhF7DioA1se5TwQFa?usp=sharing</p> <p>\u0e40\u0e1b\u0e34\u0e14 file colab</p> <p></p> <p>\u0e2b\u0e23\u0e37\u0e2d\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c colab \u0e44\u0e14\u0e49\u0e40\u0e0a\u0e48\u0e19\u0e01\u0e31\u0e19 \u0e44\u0e1b\u0e22\u0e31\u0e07 https://colab.research.google.com/ \u0e2a\u0e23\u0e49\u0e32\u0e07 new-project tflite-sinewave-training.ipynb</p> <p>https://gist.github.com/opendevbook/89be92082418aa046638beec58f2e723</p> <p></p>"},{"location":"webcam/5tensorflowLite_basic1/#sine_modeltflite","title":"sine_model.tflite","text":"<ul> <li>jupyter notebook run in linux environment, \u0e1c\u0e25\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 /content/sine_model.tflite</li> </ul> <ul> <li>\u0e01\u0e14 Right Click Download \u0e21\u0e32\u0e22\u0e31\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e07 pc , \u0e40\u0e1b\u0e34\u0e14 browser https://netron.app/</li> </ul> <ul> <li>\u0e40\u0e1b\u0e34\u0e14 \u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32 \u0e08\u0e32\u0e01 Colab</li> </ul> <ul> <li>Run \u0e43\u0e19 Colab \u0e15\u0e48\u0e2d\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23 Covert file</li> </ul> <ul> <li>Download h file \u0e21\u0e32\u0e22\u0e31\u0e07 pc</li> </ul>"},{"location":"webcam/5tensorflowLite_basic1/#start-arduino-project","title":"Start Arduino project","text":"<ul> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07 Arduino project \u0e41\u0e25\u0e30\u0e19\u0e33 \u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49 (sine_model.h) \u0e21\u0e32\u0e44\u0e27\u0e49\u0e43\u0e19 Arduino Project</li> </ul> <p>\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e40\u0e02\u0e49\u0e32\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 00 \u0e16\u0e36\u0e07 2\u03c02\u03c0 \u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e48\u0e32\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 \u22121\u22121 \u0e16\u0e36\u0e07 11 \u0e42\u0e14\u0e22\u0e16\u0e49\u0e32\u0e40\u0e23\u0e32\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e2b\u0e49\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e1b\u0e49\u0e2d\u0e19\u0e40\u0e02\u0e49\u0e32\u0e40\u0e1b\u0e47\u0e19 xx \u0e41\u0e25\u0e30\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e40\u0e1b\u0e47\u0e19 yy \u0e42\u0e21\u0e40\u0e14\u0e25\u0e04\u0e27\u0e23\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e19\u0e32\u0e22\u0e04\u0e48\u0e32 y=sin\u2061(x)y=sin(x) \u0e44\u0e14\u0e49</p> <p></p> tenserflowlite_basic_1<pre><code>#include &lt;TensorFlowLite_ESP32.h&gt;\n#include \"tensorflow/lite/micro/all_ops_resolver.h\"\n#include \"tensorflow/lite/micro/micro_error_reporter.h\"\n#include \"tensorflow/lite/micro/micro_interpreter.h\"\n#include \"tensorflow/lite/micro/system_setup.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\n// Our model\n#include \"sine_model.h\"\n\n#define DEBUG 1\n\n// Some settings\nconstexpr int led_pin = 2;\nconstexpr float pi = 3.14159265;                  // Some pi\nconstexpr float freq = 0.5;                       // Frequency (Hz) of sinewave\nconstexpr float period = (1 / freq) * (1000000);  // Period (microseconds)\n\n// TFLite globals,\nnamespace {\ntflite::ErrorReporter* error_reporter = nullptr;\nconst tflite::Model* model = nullptr;\ntflite::MicroInterpreter* interpreter = nullptr;\nTfLiteTensor* input = nullptr;\nTfLiteTensor* output = nullptr;\nint inference_count = 0;\n\n// Crete area of memory use for input, output\n// Estimate size start from 2 kilobyte (1 * 1024)\nconstexpr int kTensorArenaSize = 2 * 1024;\nuint8_t tensor_arena[kTensorArenaSize];\n\n}  // namespace\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n\n\n  // Set up logging. Google style is to avoid globals or statics because of\n  // lifetime uncertainty, but since this has a trivial destructor it's okay.\n  // NOLINTNEXTLINE(runtime-global-variables)\n  static tflite::MicroErrorReporter micro_error_reporter;\n  error_reporter = &amp;micro_error_reporter;\n\n  // Map the model into a usable data structure. This doesn't involve any\n  // copying or parsing, it's a very lightweight operation.\n  model = tflite::GetModel(sine_model);\n  if (model-&gt;version() != TFLITE_SCHEMA_VERSION) {\n    TF_LITE_REPORT_ERROR(error_reporter,\n                         \"Model provided is schema version %d not equal \"\n                         \"to supported version %d.\",\n                         model-&gt;version(), TFLITE_SCHEMA_VERSION);\n    return;\n  }\n\n  // This pulls in all the operation implementations we need.\n  // NOLINTNEXTLINE(runtime-global-variables)\n  static tflite::AllOpsResolver resolver;\n\n  // Build an interpreter to run the model with.\n  static tflite::MicroInterpreter static_interpreter(\n    model, resolver, tensor_arena, kTensorArenaSize, error_reporter);\n  interpreter = &amp;static_interpreter;\n\n  // Allocate memory from the tensor_arena for the model's tensors.\n  TfLiteStatus allocate_status = interpreter-&gt;AllocateTensors();\n  if (allocate_status != kTfLiteOk) {\n    TF_LITE_REPORT_ERROR(error_reporter, \"AllocateTensors() failed\");\n    return;\n  }\n\n  // Obtain pointers to the model's input and output tensors.\n  input = interpreter-&gt;input(0);\n  output = interpreter-&gt;output(0);\n\n  // Keep track of how many inferences we have performed.\n  inference_count = 0;\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n#if DEBUG\n  unsigned long start_timestamp = micros();\n#endif\n\n  // Get current timestamp and modulo with period\n  unsigned long timestamp = micros();\n  timestamp = timestamp % (unsigned long)period;\n\n  // Calculate x value to feed to the model\n  float x_val = ((float)timestamp * 2 * pi) / period;\n\n  // Copy value to input buffer (tensor)\n  input-&gt;data.f[0] = x_val;\n\n  // Run inference\n  TfLiteStatus invoke_status = interpreter-&gt;Invoke();\n  if (invoke_status != kTfLiteOk) {\n    error_reporter-&gt;Report(\"Invoke failed on input: %f\\n\", x_val);\n  }\n\n  // Read predicted y value from output buffer (tensor)\n  float y_val = output-&gt;data.f[0];\n  // Print value\n  Serial.println(y_val);\n\n#if DEBUG\n  Serial.print(\"Time for inference (us): \");\n  Serial.println(micros() - start_timestamp);\n#endif\n}\n</code></pre> <p>\u0e43\u0e2b\u0e49 Download code \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 file Google Drive</p>"},{"location":"webcam/6esp32_objectdetection/","title":"6 ESP32 Object Detection","text":"<ul> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07 Account \u0e43\u0e19 edge impulse</li> </ul> <p>\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Library EloquentEsp32cam</p> <p></p> <ul> <li>\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Example</li> </ul> <p></p> <ul> <li>\u0e40\u0e25\u0e37\u0e2d\u0e01 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Collect_Images_for_EdgeImpulse.ino</li> </ul> Collect_Images_for_EdgeImpulse.ino<pre><code>/**\n * Collect images for Edge Impulse image\n * classification / object detection\n *\n * BE SURE TO SET \"TOOLS &gt; CORE DEBUG LEVEL = INFO\"\n * to turn on debug messages\n */\n\n// if you define WIFI_SSID and WIFI_PASS before importing the library,\n// you can call connect() instead of connect(ssid, pass)\n//\n// If you set HOSTNAME and your router supports mDNS, you can access\n// the camera at http://{HOSTNAME}.local\n\n#define WIFI_SSID \"TrueGigatexFiber_uS7_2.4G\"\n#define WIFI_PASS \"itbakery@9\"\n#define HOSTNAME \"esp32cam\"\n\n\n#include &lt;eloquent_esp32cam.h&gt;\n#include &lt;eloquent_esp32cam/extra/esp32/wifi/sta.h&gt;\n#include &lt;eloquent_esp32cam/viz/image_collection.h&gt;\n\nusing eloq::camera;\nusing eloq::wifi;\nusing eloq::viz::collectionServer;\n\n\nvoid setup() {\n    delay(3000);\n    Serial.begin(115200);\n    Serial.println(\"___IMAGE COLLECTION SERVER___\");\n\n    // camera settings\n    // replace with your own model!\n    // camera.pinout.wroom_s3();\n    camera.pinout.aithinker();\n    camera.brownout.disable();\n    // Edge Impulse models work on square images\n    // face resolution is 240x240\n    camera.resolution.face();\n    camera.quality.high();\n\n    // init camera\n    while (!camera.begin().isOk())\n        Serial.println(camera.exception.toString());\n\n    // connect to WiFi\n    while (!wifi.connect().isOk())\n      Serial.println(wifi.exception.toString());\n\n    // init face detection http server\n    while (!collectionServer.begin().isOk())\n        Serial.println(collectionServer.exception.toString());\n\n    Serial.println(\"Camera OK\");\n    Serial.println(\"WiFi OK\");\n    Serial.println(\"Image Collection Server OK\");\n    Serial.println(collectionServer.address());\n}\n\n\nvoid loop() {\n    // server runs in a separate thread, no need to do anything here\n}\n</code></pre> <ul> <li>compile \u0e21\u0e35 error \u0e43\u0e2b\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c\u0e43\u0e19 Library \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23 Download \u0e21\u0e32</li> </ul> <p></p> <p></p> <p>\u0e41\u0e25\u0e49\u0e27 upload \u0e2d\u0e35\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07</p> <p></p> <p></p> <ul> <li>\u0e40\u0e1b\u0e34\u0e14 browser ip \u0e17\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07 http://192.168.1.184</li> </ul> <p></p> <ul> <li>\u0e01\u0e14 Start collection \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23 \u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01 \u0e23\u0e39\u0e1b\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23 train</li> </ul> <p></p> <ul> <li> <p>\u0e01\u0e14 Download \u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e   </p> </li> <li> <p>Label \u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e   </p> </li> <li> <p>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e20\u0e32\u0e1e\u0e08\u0e30\u0e21\u0e35 Label \u0e17\u0e38\u0e01 \u0e44\u0e1f\u0e25\u0e4c   </p> </li> <li> <p>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u0e40\u0e01\u0e47\u0e1a\u0e20\u0e32\u0e1e\u0e01\u0e25\u0e48\u0e2d\u0e07 box   </p> </li> <li> <p>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u0e40\u0e01\u0e47\u0e1a\u0e20\u0e32\u0e1e\u0e01\u0e25\u0e48\u0e2d\u0e07 Mouse   </p> </li> </ul> <p></p>"},{"location":"webcam/6esp32_objectdetection/#upload-edge-impulse","title":"Upload \u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e \u0e44\u0e1b\u0e22\u0e31\u0e07 Edge impulse","text":"<ul> <li> <p>\u0e2a\u0e23\u0e49\u0e32\u0e07 project \u0e43\u0e19 Edge impulse   </p> </li> <li> <p>\u0e01\u0e14 \u0e2a\u0e23\u0e49\u0e32\u0e07 project   </p> </li> <li> <p>\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d project <code>muict-esp32-cam-object-detect</code></p> </li> </ul> <p></p> <ul> <li>\u0e40\u0e1e\u0e34\u0e48\u0e21 Image \u0e40\u0e02\u0e49\u0e32\u0e2a\u0e39\u0e48 \u0e42\u0e1b\u0e23\u0e40\u0e08\u0e04</li> </ul> <p></p> <ul> <li>\u0e01\u0e14 upload Data</li> </ul> <p></p> <ul> <li>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 upload \u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23 upload \u0e17\u0e31\u0e49\u0e07 folder</li> </ul> <p></p> <ul> <li>\u0e01\u0e14 upload data</li> </ul> <p></p> <p></p> <p></p> <ul> <li>upload data set \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14</li> </ul>"},{"location":"webcam/6esp32_objectdetection/#labeling-queue","title":"Labeling Queue","text":"<ul> <li>\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 upload \u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e17\u0e33 labeling</li> </ul> <ul> <li>\u0e43\u0e0a\u0e49 mouse \u0e25\u0e32\u0e01 \u0e04\u0e23\u0e48\u0e2d\u0e21\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e \u0e41\u0e25\u0e30\u0e01\u0e14 save label</li> </ul> <ul> <li>label \u0e17\u0e38\u0e01\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e38\u0e48\u0e17\u0e35\u0e48 Queue \u0e08\u0e19 Queue \u0e40\u0e1b\u0e47\u0e19 0</li> </ul>"},{"location":"webcam/6esp32_objectdetection/#impulse-design-create-impulse","title":"Impulse design &gt; Create impulse","text":"<ul> <li>\u0e40\u0e25\u0e37\u0e2d\u0e01 Board \u0e1b\u0e25\u0e32\u0e22\u0e17\u0e32\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a</li> </ul> <ul> <li> <p>Add process box   </p> </li> <li> <p>Add image block   </p> </li> <li> <p>Add learning block</p> </li> </ul> <p></p> <p></p> <ul> <li>Save impulse</li> </ul> <p></p>"},{"location":"webcam/6esp32_objectdetection/#gray-image","title":"\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 \u0e20\u0e32\u0e1e Gray \u0e42\u0e14\u0e22\u0e44\u0e1b\u0e17\u0e35\u0e48 \u0e40\u0e21\u0e19\u0e39 Image","text":"<ul> <li>Generate feature</li> </ul>"},{"location":"webcam/6esp32_objectdetection/#object-detection","title":"\u0e44\u0e1b\u0e22\u0e31\u0e07 \u0e40\u0e21\u0e19\u0e39 Object Detection","text":"<ul> <li>\u0e01\u0e14 start training</li> </ul>"},{"location":"webcam/6esp32_objectdetection/#training-deploy-arduino-library","title":"\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e17\u0e01 Training \u0e01\u0e47\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23 Deploy \u0e40\u0e25\u0e37\u0e2d\u0e01 Arduino library","text":""},{"location":"webcam/6esp32_objectdetection/#change-target-espressif-esp-eye","title":"Change Target Espressif ESP-EYE","text":""},{"location":"webcam/6esp32_objectdetection/#build-zip-file","title":"Build \u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 Zip file","text":""},{"location":"webcam/6esp32_objectdetection/#add-zip-file-to-arduino","title":"add zip file to Arduino","text":""},{"location":"webcam/6esp32_objectdetection/#edge-impluse","title":"\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e1f\u0e25\u0e4c \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49 \u0e08\u0e32\u0e01 edge impluse","text":""},{"location":"webcam/6esp32_objectdetection/#up-load","title":"up load \u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08","text":""},{"location":"webcam/6esp32_objectdetection/#open-file-esp32_camera","title":"open file esp32_camera","text":"<ul> <li>\u0e41\u0e01\u0e49 \u0e44\u0e1f\u0e25\u0e4c</li> </ul> <ul> <li>save file esp32_camera_impulse.ino</li> </ul> <p>Download Code EdgeImpulse.zip</p> <p></p>"}]}